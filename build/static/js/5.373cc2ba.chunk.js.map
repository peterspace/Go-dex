{"version":3,"file":"static/js/5.373cc2ba.chunk.js","mappings":"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","sources":["uiComponents/AppPage/ExchangeToCash/Client/GetCash.js","uiComponents/AppPage/Exchange_getCash.jsx"],"sourcesContent":["//import MarketplaceJSON from \"../Marketplace.json\";\nimport axios from 'axios';\nimport { ethers } from 'ethers';\nimport React, { useState, useEffect } from 'react';\n//================={wallet connect}===================\nimport { useSigner, useSignMessage } from \"wagmi\";\n\n//================={Exchange To Cash Contracts}===================\nimport GoExchangeToCashETH from '../../../../Contracts/GoExchangeToCashETH.json';\nimport GoExchangeToCashMATIC from '../../../../Contracts/GoExchangeToCashMATIC.json';\nimport GoExchangeToCashBSC from '../../../../Contracts/GoExchangeToCashBSC.json';\nimport GoExchangeToCashArbitrum from '../../../../Contracts/GoExchangeToCashArbitrum.json';\nimport GoExchangeToCashOptimism from '../../../../Contracts/GoExchangeToCashOptimism.json';\nimport GoExchangeToCashGoerliETH from '../../../../Contracts/GoExchangeToCashGoerliETH.json';\nimport GoExchangeToCashTBNB from '../../../../Contracts/GoExchangeToCashTBNB.json';\nimport GoExchangeToCashMumbaiMATIC from '../../../../Contracts/GoExchangeToCashMumbaiMATIC.json';\n\nconst transactions = [\n  { name: 'Get Cash', val: 0 },\n  { name: 'Get Crypto', val: 1 },\n  { name: 'Cancel', val: 2 },\n];\n\nexport default function GetCash({ walletAddress, chainId, txId }) {\n  //const [data, updateData] = useState({});\n  const [message, updateMessage] = useState('');\n  const [data, updateData] = useState({});\n  const [dataFetched, updateFetched] = useState(false);\n  const [amount, setAmount] = useState('');\n  const [transactToken, setTransactToken] = useState('');\n  const [tokenDecimals, setTokenDecimals] = useState('');\n  //==================={wallet connect}==============================\n  const signer = useSigner(); // use signer.data for ethers.Contract\n  // let message = `\n  //   Govercity Connect >>\n  //   Transact: Transfer\n  //   Token: ${token?.symbol}\n  //   Address: ${walletAddress}\n  //   `;\n  //const { data, signMessage } = useSignMessage({ message });\n  const [dexContractAddress, setDexContractAddress] = useState('');\n  const [dexContractAbi, setDexContractAbi] = useState([]);\n  const [activeChainDecimals, setActiveChainDecimals] = useState();\n  const [activeChainAddress, setActiveChainAddress] = useState();\n  const [dexRoyaltyValue, setDexRoyaltyValue] = useState(0.1);\n  //   const params = useParams();\n  //   const txId = params.txId;\n  //   const location = useLocation();\n  const [activeTransaction, setActiveTransaction] = useState(transactions[0]);\n\n  useEffect(() => {\n    chainId && contractSwitcher(); // contract Switcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chainId]);\n\n  function contractSwitcher() {\n    //e.preventDefault();\n\n    //==================={TEST NETS}===============================\n    // GOERLIETH: Chainid = 5 Currency: ETH\n    // Mumbai Matic: Chainid = 8001 Currency: MATIC\n    // Binance Test Smart Chain: Chainid = 97 Currency: BNB\n\n    //==================={MAIN NETS}===============================\n    // ETH: Chainid = 1 Currency: ETH\n    // Polygon Matic: Chainid = 137 Currency: MATIC\n    // Binance Smart Chain: Chainid = 56 Currency: BNB\n    // Arbitrum One: Chain: Chainid = 42161 Currency: ETH\n    // Optimism: Chain: Chainid = 10 Currency: ETH\n\n    //let chainId = chain.id;\n\n    //let chainId = chain?.id;\n\n    //=======get Crypto Contract Switcher\n    try {\n      switch (chainId) {\n        case 5:\n          //GOERLIETH\n          setDexContractAddress(GoExchangeToCashGoerliETH.address);\n          setDexContractAbi(GoExchangeToCashGoerliETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 80001:\n          //MUMBAIMATIC\n          setDexContractAddress(GoExchangeToCashMumbaiMATIC.address);\n          setDexContractAbi(GoExchangeToCashMumbaiMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 97:\n          //TBNB\n          setDexContractAddress(GoExchangeToCashTBNB.address);\n          setDexContractAbi(GoExchangeToCashTBNB.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 1:\n          //ETH\n          setDexContractAddress(GoExchangeToCashETH.address);\n          setDexContractAbi(GoExchangeToCashETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 137:\n          //MATIC\n          setDexContractAddress(GoExchangeToCashMATIC.address);\n          setDexContractAbi(GoExchangeToCashMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 56:\n          //BNB(BSC)\n          setDexContractAddress(GoExchangeToCashBSC.address);\n          setDexContractAbi(GoExchangeToCashBSC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 10:\n          //OPTIMISM (currency: ETH)\n          setDexContractAddress(GoExchangeToCashOptimism.address);\n          setDexContractAbi(GoExchangeToCashOptimism.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 42161:\n          //ARBITRUM\n          setDexContractAddress(GoExchangeToCashArbitrum.address);\n          setDexContractAbi(GoExchangeToCashArbitrum.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        default:\n          console.warn('Please choose a token!');\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function getbanksTransact(txId) {\n    let dexContract = new ethers.Contract(\n      dexContractAddress,\n      dexContractAbi,\n      signer.data // should be just \"signer\" if using windows.ethereum\n    );\n\n    let transact = await dexContract.getExchangeVoucherForId(txId);\n\n    // const transact = await dexContract.getExchangeVoucherForId(txId);\n    // const transact = await dexContract.getOneClientsCompletedTransact(txId);\n    console.log(transact);\n    //Fetch all the details of every NFT from the contract and display\n    let item = {\n      txId: transact.txId,\n      token: transact.token,\n      client: transact.client,\n      bank: transact.bank,\n      CryptoPrice: transact.CryptoPrice,\n      tokenDecimals: transact.tokenDecimals,\n      dexShare: transact.dexShare,\n      endBlock: transact.endBlock,\n      completed: transact.completed,\n      clientPaidCrypto: transact.clientPaidCrypto,\n      bankPaidCash: transact.bankPaidCash,\n      clientReceivedCash: transact.clientReceivedCash,\n      bankReceivedCrypto: transact.bankReceivedCrypto,\n      started: transact.started,\n    };\n\n    console.log(item);\n    updateData(item);\n    updateFetched(true);\n    setAmount(item.CryptoPrice); // set amount\n    setTransactToken(item.token); // set the token\n    setTokenDecimals(item.tokenDecimals); // set the decimals\n  }\n\n  async function clientGetCash(txId) {\n    try {\n      let dexContract = new ethers.Contract(\n        dexContractAddress,\n        dexContractAbi,\n        signer.data // should be just \"signer\" if using windows.ethereum\n      );\n\n      updateMessage('Transaction in progress...');\n      //run the executeSale function\n      let transaction = await dexContract.clientGetCash(txId, {\n        gasLimit: 3000000,\n      });\n      await transaction.wait();\n\n      alert('You have paid, please wait for the bank to confirm!');\n      updateMessage('');\n    } catch (e) {\n      alert('Upload Error' + e);\n    }\n  }\n\n  async function clientCancel(txId) {\n    try {\n      let dexContract = new ethers.Contract(\n        dexContractAddress,\n        dexContractAbi,\n        signer.data // should be just \"signer\" if using windows.ethereum\n      );\n\n      updateMessage('Transaction in progress...');\n      //run the executeSale function\n      let transaction = await dexContract.clientCancel(txId, {\n        gasLimit: 3000000,\n      });\n      await transaction.wait();\n\n      alert('You have cancelled the transaction, please file a dispute!');\n      updateMessage('');\n    } catch (e) {\n      alert('An Error occurred' + e);\n    }\n  }\n\n  if (!dataFetched) getbanksTransact(txId);\n\n  function handleGetCashSubmit(txId) {\n    clientGetCash(txId);\n    // window.location.replace('/get-cash/clientpage'); // location\n  }\n\n  function handleClientCancelSubmit(txId) {\n    clientCancel(txId);\n    // window.location.replace('/get-cash/clientpage'); // location\n  }\n\n  return (\n    <div className=\"flex flex-col gap-3\">\n      <select\n        onChange={(e) => {\n          setActiveTransaction(e.target.value); // converting input to Number\n        }}\n      >\n        {transactions.map((t, i) => (\n          <option key={t.name} value={t.name}>\n            {t.name}\n          </option>\n        ))}\n      </select>\n      <div className=\"text-xl space-y-8 text-white rounded-lg p-5\">\n        <div>TxId: {data.txId}</div>\n\n        <div>\n          {/* Price: <span className=\"\">{data.CryptoPrice + \" ETH\"}</span> */}\n          Amount:{' '}\n          <span className=\"\">{data.CryptoPrice + `${data.symbol}`}</span>\n        </div>\n        <div>\n          Client: <span className=\"text-sm\">{data.client}</span>\n        </div>\n        <div>\n          Bank: <span className=\"text-sm\">{data.bank}</span>\n        </div>\n        <div>\n          {walletAddress === data.client &&\n          activeTransaction.name === 'Get Cash' ? (\n            <button\n              className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\n              onClick={() => handleGetCashSubmit(txId)}\n            >\n              Get Cash\n            </button>\n          ) : (\n            <div className=\"text-emerald-700\">You are not the client</div>\n          )}\n\n          <div className=\"text-green text-center mt-3\">{message}</div>\n        </div>\n        <div>\n          {walletAddress == data.client &&\n          activeTransaction.name == 'Cancel' ? (\n            <button\n              className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\n              onClick={() => handleClientCancelSubmit(txId)}\n            >\n              Cancel\n            </button>\n          ) : (\n            <div className=\"text-emerald-700\">You are not the client</div>\n          )}\n\n          <div className=\"text-green text-center mt-3\">{message}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { IoMdCheckmarkCircle } from 'react-icons/io';\nimport { useSigner, useSignMessage } from \"wagmi\";\nimport { ethers } from 'ethers';\nimport Erc20 from '../engine/erc20.json';\nimport { TokenListButton, TransactButton } from '../Buttons';\nimport Modal from '../Modal';\nimport Spinner from '../Spinner';\nimport banks from '../../Contracts/allBanks';\nimport tokens from '../../res/tokens';\nimport TokenComponent from '../TokenComponent';\nimport GetCash from './ExchangeToCash/Client/GetCash';\n\n//================={Exchange To Cash Contracts}===================\nimport GoExchangeToCashETH from '../../Contracts/GoExchangeToCashETH.json';\nimport GoExchangeToCashMATIC from '../../Contracts/GoExchangeToCashMATIC.json';\nimport GoExchangeToCashBSC from '../../Contracts/GoExchangeToCashBSC.json';\nimport GoExchangeToCashArbitrum from '../../Contracts/GoExchangeToCashArbitrum.json';\nimport GoExchangeToCashOptimism from '../../Contracts/GoExchangeToCashOptimism.json';\nimport GoExchangeToCashGoerliETH from '../../Contracts/GoExchangeToCashGoerliETH.json';\nimport GoExchangeToCashTBNB from '../../Contracts/GoExchangeToCashTBNB.json';\nimport GoExchangeToCashMumbaiMATIC from '../../Contracts/GoExchangeToCashMumbaiMATIC.json';\n\n// tokens allowed to withdraw from\nconst filterTokens = ['usdc', 'usdt', 'dai', 'busd', 'tusd'];\n\nconst ExchangeGetCash = ({ walletAddress, chainId, setNewTransaction }) => {\n  const [amount, setAmount] = useState(0.0); // Amount to withdraw\n  const [filteredTokens, setFilteredfTokens] = useState([]);\n\n  //============={Modals}================//\n  const [isTokenModalVisible, setIsTokenModalVisible] = useState(false);\n  const [isGetCashModalVisible, setIsGetCashModalVisible] = useState(false);\n  const [isBankModalVisible, setIsBankModalVisible] = useState(false);\n\n  //============={Contract Params}============//\n  const [selectedToken, setSelectedToken] = useState({});\n  const [selectedBank, setSelectedBank] = useState({});\n  const [filteredBanks, setFilteredBanks] = useState(banks);\n  const [bankAddress, setBankAddress] = useState(''); // chosen bank\n  const [dexRoyaltyValue, setDexRoyaltyValue] = useState(0.1);\n  const [dexContractAddress, setDexContractAddress] = useState('');\n  const [dexContractAbi, setDexContractAbi] = useState([]);\n  const [signature, setSignature] = useState('');\n  const [quote, setQuote] = useState();\n  const [activeChainDecimals, setActiveChainDecimals] = useState();\n  const [activeChainAddress, setActiveChainAddress] = useState();\n\n\n  const [transferStatus, setTransferStatus] = useState({\n    status: '',\n    message: '',\n  });\n\n  /* ==================== walletConnect ==================== */\n  const signer = useSigner(); // use signer.data for ethers.Contract\n  let message = `\n\t\tGovercity Connect >>\n\t\tTransact: Transfer\n\t\tToken: ${selectedToken?.symbol}\n\t\tAddress: ${walletAddress}\n\t\t`;\n  const { data, signMessage } = useSignMessage({ message });\n\n  function onValueChanged(e) {\n    setAmount((existingValue) =>\n      e.target.validity.valid ? e.target.value : existingValue\n    );\n    // setIsCalculating(true);\n  }\n\n  function contractSwitcher() {\n    try {\n      switch (chainId) {\n        case 5:\n          //GOERLIETH\n          setDexContractAddress(GoExchangeToCashGoerliETH.address);\n          setDexContractAbi(GoExchangeToCashGoerliETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 80001:\n          //MUMBAIMATIC\n          setDexContractAddress(GoExchangeToCashMumbaiMATIC.address);\n          setDexContractAbi(GoExchangeToCashMumbaiMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 97:\n          //TBNB\n          setDexContractAddress(GoExchangeToCashTBNB.address);\n          setDexContractAbi(GoExchangeToCashTBNB.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 1:\n          //ETH\n          setDexContractAddress(GoExchangeToCashETH.address);\n          setDexContractAbi(GoExchangeToCashETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 137:\n          //MATIC\n          setDexContractAddress(GoExchangeToCashMATIC.address);\n          setDexContractAbi(GoExchangeToCashMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 56:\n          //BNB(BSC)\n          setDexContractAddress(GoExchangeToCashBSC.address);\n          setDexContractAbi(GoExchangeToCashBSC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 10:\n          //OPTIMISM (currency: ETH)\n          setDexContractAddress(GoExchangeToCashOptimism.address);\n          setDexContractAbi(GoExchangeToCashOptimism.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 42161:\n          //ARBITRUM\n          setDexContractAddress(GoExchangeToCashArbitrum.address);\n          setDexContractAbi(GoExchangeToCashArbitrum.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        default:\n          console.warn('Please choose a token!');\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function getApproval() {\n    // return if there is an ongoing transaction\n    if (transferStatus.status === 'inprogress') return;\n\n    //======= setting transaction status\n    setTransferStatus({\n      status: 'inprogress',\n      message: 'Transaction in progress...',\n    });\n\n    try {\n      let approval = await sendToken_approval();\n      // console.log(\"approval\", approval);\n      if (approval.hash) {\n        setTransferStatus({\n          status: 'inprogress',\n          message: 'Approval granted.',\n        });\n        let cashOrder = await getCashOrder();\n        console.log('cashOrder Status', cashOrder);\n      } else {\n        setTransferStatus({\n          status: 'error',\n          message: 'Approval declined',\n        });\n        console.error('approvalErr', approval);\n      }\n    } catch (e) {\n      if (e.code === 'ACTION_REJECTED') {\n        setTransferStatus({\n          status: 'error',\n          message: 'User rejected transaction',\n        });\n      } else if (e.code === 'UNPREDICTABLE_GAS_LIMIT') {\n        setTransferStatus({\n          status: 'error',\n          message: 'Error due to unpredictable gas limit',\n        });\n      } else {\n        setTransferStatus({\n          status: 'error',\n          message: 'An error occured',\n        });\n        console.error('transactionErr', e);\n      }\n    }\n  }\n\n  //==============================={sendToken_approval}===============================================\n  async function sendToken_approval() {\n    //========={signature}=====================\n    signMessage();\n    setSignature(data);\n\n    let parsed = ethers.utils\n      .parseUnits(amount, selectedToken.decimals.toString())\n      .toString();\n    //eslint-disable-next-line no-undef\n    let amountStr = BigInt(parsed).toString();\n    console.info('amountStr', amountStr);\n    console.info('selectedToken', selectedToken);\n\n    //======{Get Token Approval}=============================\n    const ERC20Contract = new ethers.Contract(\n      selectedToken.testAddress,\n      Erc20,\n      signer.data\n    );\n    const approval = await ERC20Contract.approve(\n      dexContractAddress.toString(),\n      amountStr\n    );\n\n    await approval.wait();\n    // console.info('approval', approval);\n    return approval;\n  }\n\n  //==============================={getCashOrder: 1}===============================================\n  // * Send service Fee and Crypto , so ERC20 token approval is required\n  async function getCashOrder() {\n    // return if there is an ongoing transaction\n    if (transferStatus.status === 'inprogress') return;\n\n    setTransferStatus({\n      status: 'inprogress',\n      message: 'Transferring...',\n    });\n\n    let dexContract = new ethers.Contract(\n      dexContractAddress,\n      dexContractAbi,\n      signer.data // should be just \"signer\" if using windows.ethereum\n    );\n\n    // console.log('createTxId');\n    // //====={Generate txId}================================\n    // let transact = await dexContract.createTxId();\n    // let tx = await transact.wait();\n    \n    // console.log(tx);\n\n    // let event = tx.events[0];\n    // let value = event.args[2];\n    // let txId = value.toNumber();\n    // console.info(\"txId\", txId);\n   \n\n    //let event = trasact.events[0]\n\n    //========={Variant: 2}=====================\n\n    // const items = await Promise.all(\n\t\t// \ttransact.map(async (i) => {\n    //     let tx1 = i.txId.toNumber();\n\t\t\t\t\n\t\t// \t\treturn tx1;\n\t\t// \t})\n\t\t// );\n    // // setItemId(items);\n\n    // let txId = items;\n    // console.log(txId);\n\n    // let txId = \"3\";\n\n\n    //==========================================\n    //=============={Get Qoute/ exchange rate of between ERC20 token and Native token }================================\n    // let amount = Number(amount);\n    let parsed = ethers.utils.parseUnits(\n      amount.toString(),\n      selectedToken.decimals.toString()\n    );\n    //eslint-disable-next-line no-undef\n    let amountStr = BigInt(parsed).toString();\n    const dexShareStr = '10000000000000000';\n    console.info('dexShareStr', dexShareStr);\n    let cryptoPriceStr = amountStr;\n    // Note: Always assign  service fee in string qouted value\n    let serviceFeeStr = '10000000000000000';\n    // let serviceFeeStr = dexShareStr;\n    let currentbank = (selectedBank?.address).toString();\n    // console.log('getCashOrder() --- currentbank', currentbank);\n    setBankAddress(currentbank);\n    let tokenDecimalsStr = selectedToken.decimals.toString();\n\n    //====={2nd contract call: begin transaction}================================\n    //========={Main contract function}=====================\n\n    console.log('getCash');\n\n    try {\n      const tx2 = await dexContract.getCash(\n        // txId,\n        //token.address, // for mainnnet\n        selectedToken.testAddress,\n        currentbank,\n        cryptoPriceStr,\n        serviceFeeStr,\n        tokenDecimalsStr,\n        dexShareStr,\n        {\n          value: serviceFeeStr,\n          gasLimit: 3000000,\n        }\n      );\n      // console.log(\"tx2\", tx2);\n\n      let sendTransaction = await tx2.wait();\n      if (sendTransaction.status === 1) {\n        setTransferStatus({\n          status: '200',\n          message: 'Transfer Successful',\n        });\n        // todo get transaction return value and pass it to <Transactions> component in Layout\n        setNewTransaction({\n          amount: amount,\n          selectedBank: selectedBank,\n          token: selectedToken,\n        });\n      }\n      console.log('sendTransaction', sendTransaction);\n      return sendTransaction;\n    } catch (e) {\n      if (e.code === 'CALL_EXCEPTION') {\n        setTransferStatus({\n          status: 'error',\n          message:\n            'An Error occurred. Please check if you have sufficient balance',\n        });\n      } else if (e.code === 'ACTION_REJECTED') {\n        setTransferStatus({\n          status: 'error',\n          message: 'User rejected transaction',\n        });\n      } else {\n        setTransferStatus({\n          status: 'error',\n          message: 'An Error occurred.',\n        });\n      }\n      console.error('dexSendToken', e);\n    }\n  }\n\n  // //==============================={getCashOrder: 2}===============================================\n  // // * Send service Fee and Crypto , so ERC20 token approval is required\n  // async function getCashOrder() {\n  //   // return if there is an ongoing transaction\n  //   if (transferStatus.status === 'inprogress') return;\n\n  //   setTransferStatus({\n  //     status: 'inprogress',\n  //     message: 'Transferring...',\n  //   });\n\n  //   let dexContract = new ethers.Contract(\n  //     dexContractAddress,\n  //     dexContractAbi,\n  //     signer.data // should be just \"signer\" if using windows.ethereum\n  //   );\n  //   //=============={Get Qoute/ exchange rate of between ERC20 token and Native token }================================\n  //   // let amount = Number(amount);\n  //   let parsed = ethers.utils.parseUnits(\n  //     amount.toString(),\n  //     selectedToken.decimals.toString()\n  //   );\n  //   //eslint-disable-next-line no-undef\n  //   let amountStr = BigInt(parsed).toString();\n  //   const dexShareStr = '10000000000000000';\n  //   console.info('dexShareStr', dexShareStr);\n  //   let cryptoPriceStr = amountStr;\n  //   // Note: Always assign  service fee in string qouted value\n  //   let serviceFeeStr = '10000000000000000';\n  //   // let serviceFeeStr = dexShareStr;\n  //   let currentbank = (selectedBank?.address).toString();\n  //   // console.log('getCashOrder() --- currentbank', currentbank);\n  //   setBankAddress(currentbank);\n  //   let tokenDecimalsStr = selectedToken.decimals.toString();\n\n  //   //========={Main contract function}=====================\n  //   try {\n  //     const tx2 = await dexContract.getCash(\n  //       //token.address, // for mainnnet\n  //       selectedToken.testAddress,\n  //       currentbank,\n  //       cryptoPriceStr,\n  //       serviceFeeStr,\n  //       tokenDecimalsStr,\n  //       dexShareStr,\n  //       {\n  //         value: serviceFeeStr,\n  //         gasLimit: 3000000,\n  //       }\n  //     );\n  //     // console.log(\"tx2\", tx2);\n\n  //     let sendTransaction = await tx2.wait();\n  //     if (sendTransaction.status === 1) {\n  //       setTransferStatus({\n  //         status: '200',\n  //         message: 'Transfer Successful',\n  //       });\n  //       // todo get transaction return value and pass it to <Transactions> component in Layout\n  //       setNewTransaction({\n  //         amount: amount,\n  //         selectedBank: selectedBank,\n  //         token: selectedToken,\n  //       });\n  //     }\n  //     console.log('sendTransaction', sendTransaction);\n  //     return sendTransaction;\n  //   } catch (e) {\n  //     if (e.code === 'CALL_EXCEPTION') {\n  //       setTransferStatus({\n  //         status: 'error',\n  //         message:\n  //           'An Error occurred. Please check if you have sufficient balance',\n  //       });\n  //     } else if (e.code === 'ACTION_REJECTED') {\n  //       setTransferStatus({\n  //         status: 'error',\n  //         message: 'User rejected transaction',\n  //       });\n  //     } else {\n  //       setTransferStatus({\n  //         status: 'error',\n  //         message: 'An Error occurred.',\n  //       });\n  //     }\n  //     console.error('dexSendToken', e);\n  //   }\n  // }\n\n  async function proceed() {\n    if (\n      walletAddress?.length <= 5 ||\n      Number(amount) < 0 ||\n      Object.keys(selectedBank).length <= 0\n    ) {\n      setTransferStatus({\n        status: '309',\n        message: 'One or more required fields are empty',\n      });\n      return;\n    }\n    /* ==================== Getting approval for getting cash ==================== */\n    await getApproval();\n  }\n\n  useEffect(() => {\n    // axios.get('https://api.1inch.io/v4.0/1/tokens').then((response) => {\n    //   let allTokenKeys = Object.keys(response.data.tokens);\n    //   let unfiltered = allTokenKeys.map((key) => response.data.tokens[key]);\n    //   let allTs = unfiltered.filter((filter) => {\n    //     return filterTokens.includes(filter.symbol.toLowerCase());\n    //   });\n    //   // todo uncomment below 2 lines and remove the last 2 lines on production\n    //   // setFilteredfTokens(allTs);\n    //   // setSelectedToken(allTs[0]);\n    //   setFilteredfTokens(tokens);\n    //   setSelectedToken(tokens[0]);\n    // });\n    setFilteredfTokens(tokens);\n      setSelectedToken(tokens[0]);\n  }, []);\n\n  useEffect(() => {\n    // if token is not empty\n    if (Object.keys(selectedToken).length !== 0) {\n      //get the list of banks which transacts with the selected token\n      let banksWithToken = banks.filter((bank) => {\n        return bank.tokens.find((tokens) => {\n          return tokens\n            .toLowerCase()\n            .includes(selectedToken.symbol.toLowerCase());\n        });\n      });\n      setFilteredBanks(banksWithToken);\n    }\n\n    // clear selected bank when the token is changed\n    if (Object.keys(selectedBank).length !== 0) {\n      setSelectedBank({});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedToken]);\n\n  useEffect(() => {\n    chainId && contractSwitcher(); // contract Switcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chainId]);\n\n  return (\n    <>\n      <section className=\"flex flex-col items-center\">\n        <section className=\"relative mt-4\">\n          <div className=\"flex flex-col\">\n            <section className=\"mt-6 flex flex-col\">\n              <span className=\"mb-1 text-gray-600\">\n                {'Trading ' + selectedToken?.symbol + ' for Cash'}\n              </span>\n              <div className=\"w-fit flex flex-row inputSection inputSectionColor\">\n                <input\n                  type=\"text\"\n                  className=\"input\"\n                  pattern=\"[0-9]*.[0-9]*\"\n                  placeholder=\"0.0\"\n                  value={amount}\n                  onChange={onValueChanged}\n                />\n                <div className=\"ml-auto mr-2\">\n                  <TokenListButton\n                    selectedTokenName={selectedToken?.symbol}\n                    modalVisible={isTokenModalVisible}\n                    toggleModal={setIsTokenModalVisible}\n                    selectedTokenIcon={selectedToken?.logoURI}\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-6 text-gray-600\">\n                <div className=\"flex flex-row gap-3 items-center\">\n                  <span>{filteredBanks?.length}</span>\n                  <span>Banks available</span>\n                </div>\n                <button\n                  type=\"button\"\n                  className={`mt-2 px-6 py-3 w-full border rounded-md\n                                                flex flex-row gap-3 cursor-pointer text-gray-400\n                                                hover:border-gray-200/50 hover:text-gray-200\n                                                `}\n                  onClick={() => setIsBankModalVisible(true)}\n                >\n                  {Object.keys(selectedBank).length !== 0 ? (\n                    <>\n                      <img\n                        src={selectedBank?.logoURI}\n                        alt=\"bank logo\"\n                        className=\"w-[25px] h-[25px]\"\n                      />\n                      <span>{selectedBank?.name}</span>\n                      <span className=\"ml-auto text-xl text-success\">\n                        <IoMdCheckmarkCircle />\n                      </span>\n                    </>\n                  ) : (\n                    <span className=\"text-center w-full\">Select a bank</span>\n                  )}\n                </button>\n\n                {/* <ul className=\"mt-3 max-h-[200px] h-fit flex flex-col gap-2 border border-gray-200/10 rounded-md overflow-scroll scrollbar-hide\">\n\t\t\t\t\t\t\t\t\t\t{filteredBanks.map((bank) => (\n\t\t\t\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\t\t\t\tkey={bank.address}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`px-6 py-3 border rounded-md\n                                                flex flex-row gap-3 cursor-pointer hover:border-gray-200/50 hover:text-gray-200\n                                                ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedBank?.address ===\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbank.address\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-gray-200/50 text-gray-200 info\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-gray-200/10 bg-black/30\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedBank(bank)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={bank.logoURI}\n\t\t\t\t\t\t\t\t\t\t\t\t\talt=\"bank\"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"w-[25px] h-[25px]\"\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<span>{bank.name}</span>\n\t\t\t\t\t\t\t\t\t\t\t\t{selectedBank?.address === bank.address && (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className=\"ml-auto text-xl text-success\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IoMdCheckmarkCircle />\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul> */}\n              </div>\n            </section>\n\n            {/* transfer status section */}\n            {transferStatus.status !== '' && (\n              <section\n                className={`mt-3 px-3 py-2 w-full h-fit flex flex-row gap-6 justify-center rounded-lg\n                ${\n                  transferStatus.status === '200'\n                    ? 'success'\n                    : transferStatus.status === '309'\n                    ? 'warn'\n                    : transferStatus.status === 'inprogress'\n                    ? 'info'\n                    : 'error'\n                }\n                            `}\n                onClick={() => setTransferStatus({ status: '', message: '' })}\n              >\n                {transferStatus.message}\n              </section>\n            )}\n\n            <div className=\"mx-auto mt-6 w-fit\">\n              <TransactButton\n                // Not doing type checking for value and walletAddress\n                disabled={\n                  walletAddress?.length <= 5 ||\n                  Number(amount) <= 0 ||\n                  !Object.keys(selectedBank).length > 0 ||\n                  transferStatus.status === 'inprogress'\n                    ? true\n                    : false\n                }\n                onClick={() => proceed()}\n              >\n                {transferStatus.status !== 'inprogress' ? (\n                  'Proceed'\n                ) : (\n                  <Spinner />\n                )}\n              </TransactButton>\n            </div>\n          </div>\n        </section>\n\n        {/*\n                ====================================================================\n                    Modals\n                ====================================================================\n                */}\n        <Modal\n          visible={isTokenModalVisible}\n          setVisible={setIsTokenModalVisible}\n          title=\"Choose your withdraw token\"\n        >\n          <div className=\"w-[500px] h-fit max-h-[400px] overflow-y-scroll\">\n            <div className=\"grid grid-cols-3 grid-flow-row gap-8\">\n              {filteredTokens?.map((t, idx) => (\n                <TokenComponent\n                  key={idx}\n                  currentItem={t}\n                  selectedToken={selectedToken}\n                  setSelectedToken={setSelectedToken}\n                  setIsTokenModalVisible={setIsTokenModalVisible}\n                />\n              ))}\n            </div>\n          </div>\n        </Modal>\n        <Modal\n          visible={isBankModalVisible}\n          setVisible={setIsBankModalVisible}\n          title=\"Select Bank\"\n        >\n          <ul className=\"mt-3 px-2 py-2 max-h-[600px] h-fit flex flex-col gap-2 border border-gray-200/10 rounded-md overflow-scroll scrollbar-hide\">\n            {filteredBanks.map((bank) => (\n              <li\n                key={bank.address}\n                className={`px-6 py-3 border rounded-md\n                                                flex flex-row gap-3 cursor-pointer text-gray-400\n                                                hover:border-gray-200/50 hover:text-gray-200\n                                                ${\n                                                  selectedBank?.address ===\n                                                  bank.address\n                                                    ? 'border-gray-200/50 text-gray-200 info'\n                                                    : 'border-gray-200/10 bg-black/30'\n                                                }`}\n                onClick={() => setSelectedBank(bank)}\n              >\n                <img\n                  src={bank.logoURI}\n                  alt=\"bank\"\n                  className=\"w-[25px] h-[25px]\"\n                />\n                <span>{bank.name}</span>\n                <span\n                  className={`ml-auto text-xl text-success\n                                    ${\n                                      selectedBank?.address === bank.address\n                                        ? 'visible'\n                                        : 'invisible'\n                                    }`}\n                >\n                  <IoMdCheckmarkCircle />\n                </span>\n              </li>\n            ))}\n          </ul>\n          <button\n            type=\"button\"\n            className=\"mt-3 ml-auto text-white\"\n            onClick={() => setIsBankModalVisible(false)}\n          >\n            Done\n          </button>\n        </Modal>\n        <Modal\n          visible={isGetCashModalVisible}\n          setVisible={setIsGetCashModalVisible}\n          hideTitle={true}\n        >\n          {/* // todo pass in the correct transaction Id */}\n          <GetCash\n            walletAddress={walletAddress}\n            chainId={chainId}\n            txId={'ll'}\n          />\n        </Modal>\n      </section>\n    </>\n  );\n};\n\nexport default ExchangeGetCash;\n"],"names":["transactions","name","val","GetCash","_ref","walletAddress","chainId","txId","_useState","useState","_useState2","_slicedToArray","message","updateMessage","_useState3","_useState4","data","updateData","_useState5","_useState6","dataFetched","updateFetched","_useState7","_useState8","setAmount","_useState9","_useState10","setTransactToken","_useState11","_useState12","setTokenDecimals","signer","useSigner","_useState13","_useState14","dexContractAddress","setDexContractAddress","_useState15","_useState16","dexContractAbi","setDexContractAbi","_useState17","_useState18","setActiveChainDecimals","_useState19","_useState20","setActiveChainAddress","_useState21","_useState22","setDexRoyaltyValue","_useState23","_useState24","activeTransaction","setActiveTransaction","_getbanksTransact","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dexContract","transact","item","wrap","_context","prev","next","ethers","getExchangeVoucherForId","sent","console","log","token","client","bank","CryptoPrice","tokenDecimals","dexShare","endBlock","completed","clientPaidCrypto","bankPaidCash","clientReceivedCash","bankReceivedCrypto","started","stop","apply","arguments","_clientGetCash","_callee2","transaction","_context2","clientGetCash","gasLimit","wait","alert","t0","_clientCancel","_callee3","_context3","clientCancel","handleGetCashSubmit","_x2","handleClientCancelSubmit","_x3","useEffect","GoExchangeToCashGoerliETH","GoExchangeToCashMumbaiMATIC","GoExchangeToCashTBNB","GoExchangeToCashETH","GoExchangeToCashMATIC","GoExchangeToCashBSC","GoExchangeToCashOptimism","GoExchangeToCashArbitrum","warn","error","contractSwitcher","_x","getbanksTransact","_jsxs","className","children","_jsx","onChange","e","target","value","map","t","i","concat","symbol","onClick","setNewTransaction","amount","filteredTokens","setFilteredfTokens","isTokenModalVisible","setIsTokenModalVisible","isGetCashModalVisible","setIsGetCashModalVisible","isBankModalVisible","setIsBankModalVisible","selectedToken","setSelectedToken","selectedBank","setSelectedBank","banks","filteredBanks","setFilteredBanks","setBankAddress","_useState25","_useState26","setSignature","_useState27","_useState28","_useState29","_useState30","_useState31","_useState32","_useState33","status","_useState34","transferStatus","setTransferStatus","_useSignMessage","useSignMessage","signMessage","getApproval","_getApproval","approval","cashOrder","abrupt","sendToken_approval","hash","getCashOrder","code","_sendToken_approval","parsed","amountStr","ERC20Contract","decimals","toString","BigInt","info","testAddress","Erc20","approve","_getCashOrder","dexShareStr","cryptoPriceStr","serviceFeeStr","currentbank","tokenDecimalsStr","tx2","sendTransaction","address","getCash","_proceed","_callee4","_context4","length","Number","Object","keys","tokens","banksWithToken","filter","find","toLowerCase","includes","_Fragment","type","pattern","placeholder","existingValue","validity","valid","TokenListButton","selectedTokenName","modalVisible","toggleModal","selectedTokenIcon","logoURI","src","alt","IoMdCheckmarkCircle","TransactButton","disabled","proceed","Spinner","Modal","visible","setVisible","title","idx","TokenComponent","currentItem","hideTitle"],"sourceRoot":""}