{"version":3,"file":"static/js/288.5acf23d9.chunk.js","mappings":"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","sources":["uiComponents/AppPage/ExchangeToCrypto/Client/ClientPageToCrypto.js","uiComponents/TableExchange.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport {\n  TableExchange,\n  TableExchangeBody,\n  TableExchangeHead,\n} from '../../../TableExchange';\nimport banks from '../../../../Contracts/allBanks';\nimport truncateEthAddress from '../../../../utils/TruncateEthAddress';\nimport { MdDone, MdDoneAll } from 'react-icons/md';\n\n//================={wallet connect}===================\nimport { useAccount, useSigner } from 'wagmi';\n\n//================={Exchange To Crypto Contracts}===================\nimport GoExchangeToCryptoETH from '../../../../Contracts/GoExchangeToCryptoETH.json';\nimport GoExchangeToCryptoMATIC from '../../../../Contracts/GoExchangeToCryptoMATIC.json';\nimport GoExchangeToCryptoBSC from '../../../../Contracts/GoExchangeToCryptoBSC.json';\nimport GoExchangeToCryptoArbitrum from '../../../../Contracts/GoExchangeToCryptoArbitrum.json';\nimport GoExchangeToCryptoOptimism from '../../../../Contracts/GoExchangeToCryptoOptimism.json';\nimport GoExchangeToCryptoGoerliETH from '../../../../Contracts/GoExchangeToCryptoGoerliETH.json';\nimport GoExchangeToCryptoTBNB from '../../../../Contracts/GoExchangeToCryptoTBNB.json';\nimport GoExchangeToCryptoMumbaiMATIC from '../../../../Contracts/GoExchangeToCryptoMumbaiMATIC.json';\n\nconst transactions = [\n  {\n    name: 'Pay Cash',\n    value: 1,\n  },\n  {\n    name: 'Get Crypto',\n    value: 2,\n  },\n  {\n    name: 'Completed',\n    value: 3,\n  },\n];\n\nexport default function ClientPageToCrypto({\n  walletAddress,\n  chainId,\n  tokensGoerli,\n  tokensMumbai,\n}) {\n  const { address, connector, isConnected } = useAccount();\n  //const [data, updateData] = useState(sampleData);\n  const [tokens, setTokens] = useState();\n  const [dataClientGetCrypto, updateDataClientGetCrypto] = useState([]);\n  const [dataClientPayCash, updateDataClientPayCash] = useState([]);\n  const [dataClientCompletedTransacts, updateDataClientCompletedTransacts] =\n    useState([]);\n\n    console.log({ dataClientGetCrypto: dataClientGetCrypto });\n    console.log({ dataClientPayCash: dataClientPayCash });\n    console.log({ dataClientCompletedTransacts: dataClientCompletedTransacts });\n\n  const [hasDataFetched, updateHasDataFetched] = useState(false);\n  //==================={wallet connect}==============================\n  const signer = useSigner(); // use signer.data for ethers.Contract\n\n  // const {data, signMessage} = useSignMessage({message});\n  const [dexContractAddress, setDexContractAddress] = useState('');\n  const [dexContractAbi, setDexContractAbi] = useState([]);\n  const [dexRoyaltyValue, setDexRoyaltyValue] = useState(0.1);\n  const [activeTransaction, setActiveTransaction] = useState();\n  const [activeChainDecimals, setActiveChainDecimals] = useState(0);\n  const [activeChainAddress, setActiveChainAddress] = useState();\n  const [activeTrade, setActiveTrade] = useState(null);\n  console.log({ activeTrade: activeTrade });\n  const [isGetCrypto, setIsGetCrypto] = useState(false);\n  const [isPayCash, setIsPayCash] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  function contractSwitcher() {\n    //e.preventDefault();\n\n    //==================={TEST NETS}===============================\n    // GOERLIETH: Chainid = 5 Currency: ETH\n    // Mumbai Matic: Chainid = 8001 Currency: MATIC\n    // Binance Test Smart Chain: Chainid = 97 Currency: BNB\n\n    //==================={MAIN NETS}===============================\n    // ETH: Chainid = 1 Currency: ETH\n    // Polygon Matic: Chainid = 137 Currency: MATIC\n    // Binance Smart Chain: Chainid = 56 Currency: BNB\n    // Arbitrum One: Chain: Chainid = 42161 Currency: ETH\n    // Optimism: Chain: Chainid = 10 Currency: ETH\n\n    //let chainId = chain.id;\n\n    //let chainId = chain?.id;\n\n    //=======get Crypto Contract Switcher\n    try {\n      switch (chainId) {\n        case 5:\n          //GOERLIETH (currency: ETH)\n          setDexContractAddress(GoExchangeToCryptoGoerliETH.address);\n          setDexContractAbi(GoExchangeToCryptoGoerliETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 80001:\n          //MUMBAIMATIC (currency: MATIC)\n          setDexContractAddress(GoExchangeToCryptoMumbaiMATIC.address);\n          setDexContractAbi(GoExchangeToCryptoMumbaiMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensMumbai);\n          break;\n\n        case 97:\n          //TBNB (currency: BNB)\n          setDexContractAddress(GoExchangeToCryptoTBNB.address);\n          setDexContractAbi(GoExchangeToCryptoTBNB.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 1:\n          //ETH (currency: ETH)\n          setDexContractAddress(GoExchangeToCryptoETH.address);\n          setDexContractAbi(GoExchangeToCryptoETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 137:\n          //MATIC (currency: MATIC)\n          setDexContractAddress(GoExchangeToCryptoMATIC.address);\n          setDexContractAbi(GoExchangeToCryptoMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensMumbai);\n          break;\n\n        case 56:\n          //BNB(BSC) (currency: BNB)\n          setDexContractAddress(GoExchangeToCryptoBSC.address);\n          setDexContractAbi(GoExchangeToCryptoBSC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 10:\n          //OPTIMISM (currency: ETH)\n          setDexContractAddress(GoExchangeToCryptoOptimism.address);\n          setDexContractAbi(GoExchangeToCryptoOptimism.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 42161:\n          //ARBITRUM (currency: ETH)\n          setDexContractAddress(GoExchangeToCryptoArbitrum.address);\n          setDexContractAbi(GoExchangeToCryptoArbitrum.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        default:\n          console.warn('Please choose a token!');\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    if (isPayCash) {\n      setIsGetCrypto(false);\n      setIsCompleted(false);\n    }\n    if (isGetCrypto) {\n      setIsPayCash(false);\n      setIsCompleted(false);\n    }\n    if (isCompleted) {\n      setIsCompleted(false);\n    }\n  }, [isPayCash, isGetCrypto, isCompleted]);\n\n  async function getClientsTransacts() {\n    let dexContract = new ethers.Contract(\n      dexContractAddress,\n      dexContractAbi,\n      signer.data // should be just \"signer\" if using windows.ethereum\n    );\n\n    let items;\n\n    let transaction;\n    switch (activeTransaction) {\n      case 'Pay Cash':\n        console.info('fetching Pay Cash transactions');\n        transaction = await dexContract.getClientsHasNotPaidCash();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = ethers.utils.formatUnits(\n              i.dexShare.toString(),\n              'ether'\n            );\n            let item = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCash: i.clientPaidCash,\n              bankReceivedCash: i.bankReceivedCash,\n              bankPaidCrypto: i.bankPaidCrypto,\n              clientReceivedCrypto: i.clientReceivedCrypto,\n              started: i.started,\n            };\n\n            return item;\n          })\n        );\n        const clientDidNotPayCashANDbankDidNotPayCrypto = items.filter(\n          (item) =>\n            item.clientPaidCash === false && item.bankPaidCrypto === false\n        );\n        updateDataClientPayCash(clientDidNotPayCashANDbankDidNotPayCrypto);\n        setIsPayCash(true);\n        break;\n\n      case 'Get Crypto':\n        console.info('fetching Get Crypto transactions');\n        transaction = await dexContract.getClientsHasNotReceivedCrypto();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = ethers.utils.formatUnits(\n              i.dexShare.toString(),\n              'ether'\n            );\n            let item = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCash: i.clientPaidCash,\n              bankReceivedCash: i.bankReceivedCash,\n              bankPaidCrypto: i.bankPaidCrypto,\n              clientReceivedCrypto: i.clientReceivedCrypto,\n              started: i.started,\n            };\n\n            return item;\n          })\n        );\n        const clientDidNotReceiveCrypto = items.filter(\n          (item) =>\n            item.clientPaidCash === true && item.bankPaidCrypto === false\n        );\n        updateDataClientGetCrypto(clientDidNotReceiveCrypto);\n        setIsGetCrypto(true);\n        break;\n\n      case 'Completed':\n        console.info('fetching Completed transactions');\n        transaction = await dexContract.getClientsCompletedTransacts();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = ethers.utils.formatUnits(\n              i.dexShare.toString(),\n              'ether'\n            );\n            let item = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCash: i.clientPaidCash,\n              bankReceivedCash: i.bankReceivedCash,\n              bankPaidCrypto: i.bankPaidCrypto,\n              clientReceivedCrypto: i.clientReceivedCrypto,\n              started: i.started,\n            };\n\n            return item;\n          })\n        );\n        const completedTransaction = items.filter(\n          (item) =>\n            // item.bankPaidCrypto === true && item.clientReceivedCrypto === true\n            item.completed === true\n        );\n        updateDataClientCompletedTransacts(completedTransaction);\n        setIsCompleted(true);\n        break;\n\n      default:\n        console.warn('Please choose a minting type!');\n    }\n\n    // Client Pay Cash\n  }\n\n  useEffect(() => {\n    chainId && contractSwitcher(); // contract Switcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chainId]);\n\n  useEffect(() => {\n    chainId && activeTransaction !== undefined && getClientsTransacts();\n    console.log('activeTransaction type', activeTransaction);\n    !chainId && console.warn('Connect The Wallet');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTransaction]);\n\n  async function clientPayCash() {\n    if (activeTrade?.txId > 0) {\n      try {\n        let dexContract = new ethers.Contract(\n          dexContractAddress,\n          dexContractAbi,\n          signer.data // should be just \"signer\" if using windows.ethereum\n        );\n\n        let transaction = await dexContract.clientPayCash(activeTrade?.txId);\n        await transaction.wait();\n\n        alert('Transaction completed. You have Paid for the Order in Cash!');\n      } catch (e) {\n        console.error('Upload Error' + e);\n        alert('Upload Error' + e);\n      }\n    }\n  }\n\n  // Optional\n  async function clientReceiveCrypto() {\n    if (activeTrade?.txId > 0) {\n      try {\n        let dexContract = new ethers.Contract(\n          dexContractAddress,\n          dexContractAbi,\n          signer.data // should be just \"signer\" if using windows.ethereum\n        );\n\n        let transaction = await dexContract.clientReceiveCrypto(\n          activeTrade?.txId\n        );\n        await transaction.wait();\n\n        alert('Transaction completed. You have Received Crypto!');\n      } catch (e) {\n        console.error('Upload Error' + e);\n        alert('Upload Error' + e);\n      }\n    }\n  }\n\n  return (\n    <>\n      {isConnected ? (\n        <>\n          <div className=\"flex flex-row gap-3 items-center\">\n            <h5 className=\"text-gray-500\">\n              {activeTransaction === undefined\n                ? 'Select Transaction Type'\n                : 'Transaction Type:'}\n            </h5>\n            <div\n              className=\"my-3 flex flex-row gap-2 start\"\n              onChange={(e) => setActiveTransaction(e.target.value)}\n            >\n              {transactions.map((tab) => (\n                <label key={tab.value}>\n                  <input\n                    type=\"radio\"\n                    id=\"tab\"\n                    name=\"tab\"\n                    value={tab.name}\n                    className=\"peer sr-only\"\n                  />\n                  <span\n                    className={`px-2 py-1 rounded-md cursor-pointer ${\n                      tab.name === activeTransaction\n                        ? 'bg-sky-600 text-gray-200'\n                        : 'bg-black/50 text-gray-200/30'\n                    } border border-transparent peer-hover:border-gray-200/30 peer-checked:bg-sky-600 peer-checked:hover:border-transparent peer-checked:text-gray-200`}\n                  >\n                    {tab.name}\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n          <div className=\"overflow-x-auto relative\">\n            {/* Pay Cash */}\n            {activeTransaction === transactions[0].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={[\n                    'Tx Id',\n                    'bank',\n                    'bank addr',\n                    'amount',\n                    'currency',\n                    'action',\n                  ]}\n                />\n                <TableExchangeBody>\n                  {dataClientPayCash.length > 0 ? (\n                    dataClientPayCash.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>\n                                {\n                                  banks.find((b) => row.bank === b.address)\n                                    ?.name\n                                }\n                              </td>\n                              <td>{truncateEthAddress(row?.bank)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {row?.clientPaidCash=== true ? (\n                                  <button\n                                    type=\"button\"\n                                  >\n                                    Paid\n                                  </button>\n                                ) : (\n                                  <button\n                                    type=\"button\"\n                                    className=\"bg-red-600 text-white cursor-pointer px-2 py-1\"\n                                    onClick={() => {\n                                      clientPayCash();\n                                    }}\n                                  >\n                                    Mark as cash paid\n                                  </button>\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isPayCash ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                      <td></td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataClientPayCash.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>No active transactions</td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n\n            {/* Get Crypto */}\n            {activeTransaction === transactions[1].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={[\n                    'Tx Id',\n                    'bank',\n                    'bank addr',\n                    'amount',\n                    'currency',\n                    'action',\n                  ]}\n                />\n                <TableExchangeBody>\n                  {dataClientGetCrypto.length > 0 ? (\n                    dataClientGetCrypto.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>\n                                {\n                                  banks.find((b) => row.bank === b.address)\n                                    ?.name\n                                }\n                              </td>\n                              <td>{truncateEthAddress(row?.bank)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              {/* <td>\n                                <button\n                                  type=\"button\"\n                                  onClick={() => {\n                                    clientReceiveCrypto();\n                                  }}\n                                >\n                                  Mark as crypto received\n                                </button>\n                              </td> */}\n                              <td>\n                                {row.bankPaidCrypto ? (\n                                  <MdDoneAll />\n                                ) : (\n                                  <MdDone />\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isGetCrypto ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                      <td></td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataClientGetCrypto.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>No active transactions</td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n\n            {/* Completed */}\n            {activeTransaction === transactions[2].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={['Tx Id', 'client', 'amount', 'currency', 'completed']}\n                />\n                <TableExchangeBody>\n                  {dataClientCompletedTransacts.length > 0 ? (\n                    dataClientCompletedTransacts.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>{truncateEthAddress(row?.client)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {row.completed ? (\n                                  <MdDoneAll />\n                                ) : (\n                                  <MdDone />\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isCompleted ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataClientCompletedTransacts.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>No transaction data</td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n          </div>\n        </>\n      ) : null}\n    </>\n  );\n}\n","import React from \"react\";\n\nconst TableExchange = ({children}) => {\n\treturn (<table className=\" w-full text-gray-400\">{children}</table>);\n};\n\nconst TableExchangeHead = ({headArray}) => {\n\treturn (\n\t\t<thead className=\"text-xs bg-gray-700 text-gray-400 uppercase\">\n\t\t\t<tr>\n\t\t\t\t{headArray.map((head, idx) => (\n\t\t\t\t\t<th key={idx} scope=\"col\" className=\"py-3 px-6\">\n\t\t\t\t\t\t{head}\n\t\t\t\t\t</th>\n\t\t\t\t))}\n\t\t\t</tr>\n\t\t</thead>\n\t);\n};\n\nconst TableExchangeBody = ({children}) => {\n\treturn (<tbody className=\"text-center\">{children}</tbody>);\n};\n\nexport {TableExchange, TableExchangeHead, TableExchangeBody};\n"],"names":["transactions","name","value","ClientPageToCrypto","_ref","walletAddress","chainId","tokensGoerli","tokensMumbai","_useAccount","useAccount","isConnected","address","connector","_useState","useState","_useState2","_slicedToArray","tokens","setTokens","_useState3","_useState4","dataClientGetCrypto","updateDataClientGetCrypto","_useState5","_useState6","dataClientPayCash","updateDataClientPayCash","_useState7","_useState8","dataClientCompletedTransacts","updateDataClientCompletedTransacts","console","log","_useState9","_useState10","signer","useSigner","_useState11","_useState12","dexContractAddress","setDexContractAddress","_useState13","_useState14","dexContractAbi","setDexContractAbi","_useState15","_useState16","setDexRoyaltyValue","_useState17","_useState18","activeTransaction","setActiveTransaction","_useState19","_useState20","setActiveChainDecimals","_useState21","_useState22","setActiveChainAddress","_useState23","_useState24","activeTrade","setActiveTrade","_useState25","_useState26","isGetCrypto","setIsGetCrypto","_useState27","_useState28","isPayCash","setIsPayCash","_useState29","_useState30","isCompleted","setIsCompleted","_getClientsTransacts","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","dexContract","items","transaction","clientDidNotPayCashANDbankDidNotPayCrypto","clientDidNotReceiveCrypto","completedTransaction","wrap","_context4","prev","next","ethers","data","t0","info","getClientsHasNotPaidCash","sent","Promise","all","map","_ref2","_callee","i","CryptoPrice","dexShare","item","_context","toString","txId","toNumber","token","client","bank","tokenDecimals","endBlock","completed","clientPaidCash","bankReceivedCash","bankPaidCrypto","clientReceivedCrypto","started","abrupt","stop","_x","apply","arguments","filter","getClientsHasNotReceivedCrypto","_ref3","_callee2","_context2","_x2","getClientsCompletedTransacts","_ref4","_callee3","_context3","_x3","warn","_clientPayCash","_callee5","_context5","clientPayCash","wait","alert","error","useEffect","GoExchangeToCryptoGoerliETH","GoExchangeToCryptoMumbaiMATIC","GoExchangeToCryptoTBNB","GoExchangeToCryptoETH","GoExchangeToCryptoMATIC","GoExchangeToCryptoBSC","GoExchangeToCryptoOptimism","GoExchangeToCryptoArbitrum","contractSwitcher","undefined","getClientsTransacts","_jsx","_Fragment","children","_jsxs","className","onChange","e","target","tab","type","id","concat","TableExchange","TableExchangeHead","headArray","TableExchangeBody","length","row","idx","_banks$find","_tokens$find","_tokens$find2","onClick","scope","banks","find","b","truncateEthAddress","testAddress","symbol","src","logoURI","alt","_banks$find2","_tokens$find3","_tokens$find4","MdDoneAll","MdDone","_tokens$find5","_tokens$find6","head"],"sourceRoot":""}