{"version":3,"file":"static/js/129.52a44b63.chunk.js","mappings":"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","sources":["uiComponents/AppPage/Exchange_getCrypto.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { IoMdCheckmarkCircle } from 'react-icons/io';\nimport { useSigner, useSignMessage } from \"wagmi\";\nimport { ethers } from 'ethers';\nimport Erc20 from '../engine/erc20.json';\nimport { TokenListButton, TransactButton } from '../Buttons';\nimport Modal from '../Modal';\nimport Spinner from '../Spinner';\nimport banks from '../../Contracts/allBanks';\nimport tokens from '../../res/tokens';\nimport TokenComponent from '../TokenComponent';\nimport GetCrypto from './ExchangeToCrypto/Client/GetCrypto';\n\n//================={Exchange To Crypto Contracts}===================\nimport GoExchangeToCryptoETH from '../../Contracts/GoExchangeToCryptoETH.json';\nimport GoExchangeToCryptoMATIC from '../../Contracts/GoExchangeToCryptoMATIC.json';\nimport GoExchangeToCryptoBSC from '../../Contracts/GoExchangeToCryptoBSC.json';\nimport GoExchangeToCryptoArbitrum from '../../Contracts/GoExchangeToCryptoArbitrum.json';\nimport GoExchangeToCryptoOptimism from '../../Contracts/GoExchangeToCryptoOptimism.json';\nimport GoExchangeToCryptoGoerliETH from '../../Contracts/GoExchangeToCryptoGoerliETH.json';\nimport GoExchangeToCryptoTBNB from '../../Contracts/GoExchangeToCryptoTBNB.json';\nimport GoExchangeToCryptoMumbaiMATIC from '../../Contracts/GoExchangeToCryptoMumbaiMATIC.json';\n\n// tokens allowed to withdraw from\nconst filterTokens = ['usdc', 'usdt', 'dai', 'busd', 'tusd'];\n\nconst ExchangeGetCrypto = ({ walletAddress, chainId, setNewTransaction }) => {\n  const [amount, setAmount] = useState(0.0); // Amount to withdraw\n  const [filteredTokens, setFilteredfTokens] = useState([]);\n\n  //============={Modals}\n  const [isTokenModalVisible, setIsTokenModalVisible] = useState(false);\n  const [isGetCryptoModalVisible, setIsGetCryptoModalVisible] = useState(false);\n  const [isBankModalVisible, setIsBankModalVisible] = useState(false);\n\n  const [selectedToken, setSelectedToken] = useState({});\n  const [selectedBank, setSelectedBank] = useState({});\n  const [filteredBanks, setFilteredBanks] = useState(banks);\n  const [bankAddress, setBankAddress] = useState(''); // chosen bank\n  const [dexRoyaltyValue, setDexRoyaltyValue] = useState(0.1);\n  const [dexContractAddress, setDexContractAddress] = useState('');\n  const [dexContractAbi, setDexContractAbi] = useState([]);\n  const [signature, setSignature] = useState('');\n  const [quote, setQuote] = useState();\n  const [activeChainDecimals, setActiveChainDecimals] = useState();\n  const [activeChainAddress, setActiveChainAddress] = useState();\n\n  const [transferStatus, setTransferStatus] = useState({\n    status: '',\n    message: '',\n  });\n\n  /* ==================== walletConnect ==================== */\n  const signer = useSigner(); // use signer.data for ethers.Contract\n  let message = `\n\t\tGovercity Connect >>\n\t\tTransact: Transfer\n\t\tToken: ${selectedToken?.symbol}\n\t\tAddress: ${walletAddress}\n\t\t`;\n  const { data, signMessage } = useSignMessage({ message });\n\n  function onValueChanged(e) {\n    setAmount((existingValue) =>\n      e.target.validity.valid ? e.target.value : existingValue\n    );\n    // setIsCalculating(true);\n  }\n\n  function contractSwitcher() {\n    try {\n      switch (chainId) {\n        case 5:\n          //GOERLIETH\n          setDexContractAddress(GoExchangeToCryptoGoerliETH.address);\n          setDexContractAbi(GoExchangeToCryptoGoerliETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 80001:\n          //MUMBAIMATIC\n          setDexContractAddress(GoExchangeToCryptoMumbaiMATIC.address);\n          setDexContractAbi(GoExchangeToCryptoMumbaiMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 97:\n          //TBNB\n          setDexContractAddress(GoExchangeToCryptoTBNB.address);\n          setDexContractAbi(GoExchangeToCryptoTBNB.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 1:\n          //ETH\n          setDexContractAddress(GoExchangeToCryptoETH.address);\n          setDexContractAbi(GoExchangeToCryptoETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 137:\n          //MATIC\n          setDexContractAddress(GoExchangeToCryptoMATIC.address);\n          setDexContractAbi(GoExchangeToCryptoMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 56:\n          //BNB(BSC)\n          setDexContractAddress(GoExchangeToCryptoBSC.address);\n          setDexContractAbi(GoExchangeToCryptoBSC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 10:\n          //OPTIMISM (currency: ETH)\n          setDexContractAddress(GoExchangeToCryptoOptimism.address);\n          setDexContractAbi(GoExchangeToCryptoOptimism.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        case 42161:\n          //ARBITRUM\n          setDexContractAddress(GoExchangeToCryptoArbitrum.address);\n          setDexContractAbi(GoExchangeToCryptoArbitrum.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          break;\n\n        default:\n          console.warn('Please choose a token!');\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function getCryptoOrder() {\n    // return if there is an ongoing transaction\n    if (transferStatus.status === 'inprogress') return;\n\n    setTransferStatus({\n      status: 'inprogress',\n      message: 'Transaction in progress...',\n    });\n\n    let dexContract = new ethers.Contract(\n      dexContractAddress,\n      dexContractAbi,\n      signer.data // should be just \"signer\" if using windows.ethereum\n    );\n    //=============={Get Qoute/ exchange rate of between ERC20 token and Native token }================================\n    let parsed = ethers.utils.parseUnits(\n      amount.toString(),\n      selectedToken.decimals.toString()\n    );\n    //eslint-disable-next-line no-undef\n    let amountStr = BigInt(parsed).toString();\n    const dexShareStr = '10000000000000000';\n    // const amountStr = (amount *(token.decimals)).toString();\n    // let parsedDex = ethers.utils.parseUnits(dexShareRate.toString(), \"18\");\n    // // eslint-disable-next-line no-undef\n    // let dexShareStr = BigInt(parsedDex).toString();\n    console.info('dexShareStr', dexShareStr);\n    let cryptoPriceStr = amountStr;\n    // Note: Always assign  service fee in string qouted value\n    let serviceFeeStr = '10000000000000000';\n    // let serviceFeeStr = dexShareStr;\n    let currentbank = (selectedBank?.address).toString();\n    setBankAddress(currentbank);\n    //setBankAddress(bank.address);\n    let tokenDecimalsStr = selectedToken.decimals.toString();\n\n    //========={Main contract function}=====================\n    try {\n      const tx2 = await dexContract.getCrypto(\n        //selectedToken.address, // for mainnnet\n        selectedToken.testAddress,\n        currentbank,\n        cryptoPriceStr,\n        dexShareStr,\n        serviceFeeStr,\n        tokenDecimalsStr,\n\n        {\n          value: serviceFeeStr,\n          gasLimit: 3000000,\n        }\n      );\n\n      let sendTransaction = await tx2.wait();\n      if (sendTransaction.status === 1) {\n        setTransferStatus({\n          status: '200',\n          message: 'Request sent',\n        });\n      }\n      console.log(tx2);\n    } catch (e) {\n      if (e.code === 'CALL_EXCEPTION') {\n        setTransferStatus({\n          status: 'error',\n          message:\n            'An Error occurred. Please check if you have sufficient balance',\n        });\n      } else if (e.code === 'ACTION_REJECTED') {\n        setTransferStatus({\n          status: 'error',\n          message: 'User rejected transaction',\n        });\n      } else {\n        setTransferStatus({\n          status: 'error',\n          message: 'An Error occurred.',\n        });\n      }\n      console.error('dexSendToken', e);\n    }\n  }\n\n  async function proceed() {\n    if (\n      walletAddress?.length <= 5 ||\n      Number(amount) < 0 ||\n      Object.keys(selectedBank).length <= 0\n    ) {\n      setTransferStatus({\n        status: '309',\n        message: 'One or more required fields are empty',\n      });\n      return;\n    }\n    await getCryptoOrder();\n  }\n\n  useEffect(() => {\n    // axios.get('https://api.1inch.io/v4.0/1/tokens').then((response) => {\n    //   let allTokenKeys = Object.keys(response.data.tokens);\n    //   let unfiltered = allTokenKeys.map((key) => response.data.tokens[key]);\n    //   let allTs = unfiltered.filter((filter) => {\n    //     return filterTokens.includes(filter.symbol.toLowerCase());\n    //   });\n    //   // todo uncomment below 2 lines and remove the last 2 lines on production\n    //   // setFilteredfTokens(allTs);\n    //   // setSelectedToken(allTs[0]);\n    //   setFilteredfTokens(tokens);\n    //   setSelectedToken(tokens[0]);\n    // });\n    setFilteredfTokens(tokens);\n    setSelectedToken(tokens[0]);\n  }, []);\n\n  useEffect(() => {\n    // if token is not empty\n    if (Object.keys(selectedToken).length !== 0) {\n      //get the list of banks which transacts with the selected token\n      let banksWithToken = banks.filter((bank) => {\n        return bank.tokens.find((tokens) => {\n          return tokens\n            .toLowerCase()\n            .includes(selectedToken.symbol.toLowerCase());\n        });\n      });\n      setFilteredBanks(banksWithToken);\n    }\n\n    // clear selected bank when the token is changed\n    if (Object.keys(selectedBank).length !== 0) {\n      setSelectedBank({});\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedToken]);\n\n  useEffect(() => {\n    chainId && contractSwitcher(); // contract Switcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chainId]);\n\n  return (\n    <>\n      <section className=\"flex flex-col items-center\">\n        <section className=\"relative mt-4\">\n          <div className=\"flex flex-col\">\n            <section className=\"mt-6 flex flex-col\">\n              <span className=\"mb-1 text-gray-600\">\n                Required amount & token\n              </span>\n              <div className=\"w-fit flex flex-row inputSection inputSectionColor\">\n                <input\n                  type=\"text\"\n                  className=\"input\"\n                  pattern=\"[0-9]*.[0-9]*\"\n                  placeholder=\"0.0\"\n                  value={amount}\n                  onChange={onValueChanged}\n                />\n                <div className=\"ml-auto mr-2\">\n                  <TokenListButton\n                    selectedTokenName={selectedToken?.symbol}\n                    modalVisible={isTokenModalVisible}\n                    toggleModal={setIsTokenModalVisible}\n                    selectedTokenIcon={selectedToken?.logoURI}\n                  />\n                </div>\n              </div>\n\n              <div className=\"mt-6 text-gray-600\">\n                <div className=\"flex flex-row gap-3 items-center\">\n                  <span>{filteredBanks?.length}</span>\n                  <span>Banks available</span>\n                </div>\n                <button\n                  type=\"button\"\n                  className={`mt-2 px-6 py-3 w-full border rounded-md\n                                                flex flex-row gap-3 cursor-pointer text-gray-400\n                                                hover:border-gray-200/50 hover:text-gray-200\n                                                `}\n                  onClick={() => setIsBankModalVisible(true)}\n                >\n                  {Object.keys(selectedBank).length !== 0 ? (\n                    <>\n                      <img\n                        src={selectedBank?.logoURI}\n                        alt=\"bank logo\"\n                        className=\"w-[25px] h-[25px]\"\n                      />\n                      <span>{selectedBank?.name}</span>\n                      <span className=\"ml-auto text-xl text-success\">\n                        <IoMdCheckmarkCircle />\n                      </span>\n                    </>\n                  ) : (\n                    <span className=\"text-center w-full\">Select a bank</span>\n                  )}\n                </button>\n              </div>\n            </section>\n\n            {/* transfer status section */}\n            {transferStatus.status !== '' && (\n              <section\n                className={`mt-3 px-3 py-2 w-full h-fit flex flex-row gap-6 justify-center rounded-lg\n                ${\n                  transferStatus.status === '200'\n                    ? 'success'\n                    : transferStatus.status === '309'\n                    ? 'warn'\n                    : transferStatus.status === 'inprogress'\n                    ? 'info'\n                    : 'error'\n                }\n                            `}\n                onClick={() => setTransferStatus({ status: '', message: '' })}\n              >\n                {transferStatus.message}\n              </section>\n            )}\n\n            <div className=\"mx-auto mt-6 w-fit\">\n              <TransactButton\n                // Not doing type checking for value and walletAddress\n                disabled={\n                  walletAddress?.length <= 5 ||\n                  Number(amount) <= 0 ||\n                  !Object.keys(selectedBank).length > 0 ||\n                  transferStatus.status === 'inprogress'\n                    ? true\n                    : false\n                }\n                onClick={() => proceed()}\n              >\n                {transferStatus.status !== 'inprogress' ? (\n                  'Proceed'\n                ) : (\n                  <Spinner />\n                )}\n              </TransactButton>\n            </div>\n          </div>\n        </section>\n\n        {/*\n                ====================================================================\n                    Modals\n                ====================================================================\n                */}\n        <Modal\n          visible={isTokenModalVisible}\n          setVisible={setIsTokenModalVisible}\n          title=\"Choose your withdraw token\"\n        >\n          <div className=\"w-[500px] h-fit max-h-[400px] overflow-y-scroll\">\n            <div className=\"grid grid-cols-3 grid-flow-row gap-8\">\n              {filteredTokens?.map((t, idx) => (\n                <TokenComponent\n                  key={idx}\n                  currentItem={t}\n                  selectedToken={selectedToken}\n                  setSelectedToken={setSelectedToken}\n                  setIsTokenModalVisible={setIsTokenModalVisible}\n                />\n              ))}\n            </div>\n          </div>\n        </Modal>\n        <Modal\n          visible={isBankModalVisible}\n          setVisible={setIsBankModalVisible}\n          title=\"Select Bank\"\n        >\n          <ul className=\"mt-3 px-2 py-2 max-h-[600px] h-fit flex flex-col gap-2 border border-gray-200/10 rounded-md overflow-scroll scrollbar-hide\">\n            {filteredBanks.map((bank) => (\n              <li\n                key={bank.address}\n                className={`px-6 py-3 border rounded-md\n                                                flex flex-row gap-3 cursor-pointer text-gray-400\n                                                hover:border-gray-200/50 hover:text-gray-200\n                                                ${\n                                                  selectedBank?.address ===\n                                                  bank.address\n                                                    ? 'border-gray-200/50 text-gray-200 info'\n                                                    : 'border-gray-200/10 bg-black/30'\n                                                }`}\n                onClick={() => setSelectedBank(bank)}\n              >\n                <img\n                  src={bank.logoURI}\n                  alt=\"bank\"\n                  className=\"w-[25px] h-[25px]\"\n                />\n                <span>{bank.name}</span>\n                <span\n                  className={`ml-auto text-xl text-success\n                                    ${\n                                      selectedBank?.address === bank.address\n                                        ? 'visible'\n                                        : 'invisible'\n                                    }`}\n                >\n                  <IoMdCheckmarkCircle />\n                </span>\n              </li>\n            ))}\n          </ul>\n          <button\n            type=\"button\"\n            className=\"mt-3 ml-auto text-white\"\n            onClick={() => setIsBankModalVisible(false)}\n          >\n            Done\n          </button>\n        </Modal>\n      </section>\n    </>\n  );\n};\n\nexport default ExchangeGetCrypto;\n"],"names":["_ref","walletAddress","chainId","_useState","setNewTransaction","useState","_useState2","_slicedToArray","amount","setAmount","_useState3","_useState4","filteredTokens","setFilteredfTokens","_useState5","_useState6","isTokenModalVisible","setIsTokenModalVisible","_useState7","_useState8","_useState9","_useState10","isBankModalVisible","setIsBankModalVisible","_useState11","_useState12","selectedToken","setSelectedToken","_useState13","_useState14","selectedBank","setSelectedBank","_useState15","banks","_useState16","filteredBanks","setFilteredBanks","_useState17","_useState18","setBankAddress","_useState19","_useState20","setDexRoyaltyValue","_useState21","_useState22","dexContractAddress","setDexContractAddress","_useState23","_useState24","dexContractAbi","setDexContractAbi","_useState25","_useState26","_useState27","_useState28","_useState29","_useState30","setActiveChainDecimals","_useState31","_useState32","setActiveChainAddress","_useState33","status","message","_useState34","transferStatus","setTransferStatus","signer","useSigner","concat","symbol","_useSignMessage","useSignMessage","data","signMessage","getCryptoOrder","_getCryptoOrder","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dexContract","parsed","amountStr","dexShareStr","cryptoPriceStr","serviceFeeStr","currentbank","tokenDecimalsStr","tx2","wrap","_context","prev","next","abrupt","ethers","toString","decimals","BigInt","console","info","address","getCrypto","testAddress","value","gasLimit","sent","wait","log","t0","code","error","stop","_proceed","_callee2","_context2","length","Number","Object","keys","useEffect","tokens","banksWithToken","filter","bank","find","toLowerCase","includes","GoExchangeToCryptoGoerliETH","GoExchangeToCryptoMumbaiMATIC","GoExchangeToCryptoTBNB","GoExchangeToCryptoETH","GoExchangeToCryptoMATIC","GoExchangeToCryptoBSC","GoExchangeToCryptoOptimism","GoExchangeToCryptoArbitrum","warn","contractSwitcher","_jsx","_Fragment","children","_jsxs","className","type","pattern","placeholder","onChange","e","existingValue","target","validity","valid","TokenListButton","selectedTokenName","modalVisible","toggleModal","selectedTokenIcon","logoURI","onClick","src","alt","name","IoMdCheckmarkCircle","TransactButton","disabled","proceed","Spinner","Modal","visible","setVisible","title","map","t","idx","TokenComponent","currentItem"],"sourceRoot":""}