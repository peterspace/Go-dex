{"version":3,"file":"static/js/733.12099b58.chunk.js","mappings":"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","sources":["uiComponents/AppPage/ExchangeToCash/Bank/BankPageToCash.js","uiComponents/AppPage/ExchangeToCrypto/Bank/BankPageToCrypto.js","uiComponents/AppPage/Bank/BankExchange.jsx","uiComponents/TableExchange.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n// import BankGetCryptoTile from \"./BankGetCryptoTile\";\n// import BankPayCashTile from \"./BankPayCashTile\";\n// import BankCompletedTransactTile from \"./BankCompletedTransactTile\";\n// import axios from \"axios\";\nimport { ethers } from 'ethers';\nimport { MdDone, MdDoneAll } from 'react-icons/md';\nimport {\n  TableExchange,\n  TableExchangeHead,\n  TableExchangeBody,\n} from '../../../TableExchange';\n\n//================={wallet connect}===================\nimport { useAccount, useSigner } from 'wagmi';\n\n//================={Exchange To Cash Contracts}===================\nimport GoExchangeToCashETH from '../../../../Contracts/GoExchangeToCashETH.json';\nimport GoExchangeToCashMATIC from '../../../../Contracts/GoExchangeToCashMATIC.json';\nimport GoExchangeToCashBSC from '../../../../Contracts/GoExchangeToCashBSC.json';\nimport GoExchangeToCashArbitrum from '../../../../Contracts/GoExchangeToCashArbitrum.json';\nimport GoExchangeToCashOptimism from '../../../../Contracts/GoExchangeToCashOptimism.json';\nimport GoExchangeToCashGoerliETH from '../../../../Contracts/GoExchangeToCashGoerliETH.json';\nimport GoExchangeToCashTBNB from '../../../../Contracts/GoExchangeToCashTBNB.json';\nimport GoExchangeToCashMumbaiMATIC from '../../../../Contracts/GoExchangeToCashMumbaiMATIC.json';\nimport truncateEthAddress from '../../../../utils/TruncateEthAddress';\n\n// Drop down menu\nconst transactions = [\n  {\n    name: 'Pay Cash',\n    value: 1,\n  },\n  {\n    name: 'Get Crypto',\n    value: 2,\n  },\n  {\n    name: 'Completed',\n    value: 3,\n  },\n];\n\nexport default function BankPageToCash({\n  walletAddress,\n  chainId,\n  tokensGoerli,\n  tokensMumbai,\n}) {\n  const { address, connector, isConnected } = useAccount();\n  const [tokens, setTokens] = useState([]);\n  const [dataBankGetCrypto, updateDataBankGetCrypto] = useState([]);\n  const [dataBankPayCash, updateDataBankPayCash] = useState([]);\n  // const [selectedTransaction, setSelectedTransaction] = useState();\n  const [dataBankCompletedTransacts, updateDataBankCompletedTransacts] =\n    useState([]);\n    console.log({ checkData: dataBankCompletedTransacts });\n  const [dexRoyaltyValue, setDexRoyaltyValue] = useState(0.1);\n  const [dexContractAddress, setDexContractAddress] = useState('');\n  const [dexContractAbi, setDexContractAbi] = useState([]);\n  const [quote, setQuote] = useState();\n  const [activeChainDecimals, setActiveChainDecimals] = useState();\n  const [activeChainAddress, setActiveChainAddress] = useState();\n  const [activeTransaction, setActiveTransaction] = useState();\n  const [hasDataFetched, setHasDataFetched] = useState(false);\n\n  const [isPayCash, setIsPayCash] = useState(false);\n  const [isGetCrypto, setIsGetCrypto] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [activeTrade, setActiveTrade] = useState(null);\n  console.log({ activeTrade: activeTrade });\n\n  \n\n  // const [activeFee, setActiveFee] = useState(null);\n  // console.log({ activeFee: activeFee ? activeFee : \"\" });\n\n  //==================={wallet connect}==============================\n  const signer = useSigner(); // use signer.data for ethers.Contract\n  // \tlet message = `\n  //   Govercity Connect >>\n  //   Transact: Transfer\n  //   Token: ${token?.symbol}\n  //   Address: ${walletAddress}\n  //   `;\n  // \tconst {data, signMessage} = useSignMessage({message});\n\n  function contractSwitcher() {\n    //e.preventDefault();\n\n    //==================={TEST NETS}===============================\n    // GOERLIETH: Chainid = 5 Currency: ETH\n    // Mumbai Matic: Chainid = 8001 Currency: MATIC\n    // Binance Test Smart Chain: Chainid = 97 Currency: BNB\n\n    //==================={MAIN NETS}===============================\n    // ETH: Chainid = 1 Currency: ETH\n    // Polygon Matic: Chainid = 137 Currency: MATIC\n    // Binance Smart Chain: Chainid = 56 Currency: BNB\n    // Arbitrum One: Chain: Chainid = 42161 Currency: ETH\n    // Optimism: Chain: Chainid = 10 Currency: ETH\n\n    //let chainId = chain.id;\n\n    //let chainId = chain?.id;\n\n    //=======get Crypto Contract Switcher\n    try {\n      switch (chainId) {\n        case 5:\n          //GOERLIETH\n          setDexContractAddress(GoExchangeToCashGoerliETH.address);\n          setDexContractAbi(GoExchangeToCashGoerliETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 80001:\n          //MUMBAIMATIC\n          setDexContractAddress(GoExchangeToCashMumbaiMATIC.address);\n          setDexContractAbi(GoExchangeToCashMumbaiMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensMumbai);\n          break;\n\n        case 97:\n          //TBNB\n          setDexContractAddress(GoExchangeToCashTBNB.address);\n          setDexContractAbi(GoExchangeToCashTBNB.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 1:\n          //ETH\n          setDexContractAddress(GoExchangeToCashETH.address);\n          setDexContractAbi(GoExchangeToCashETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 137:\n          //MATIC\n          setDexContractAddress(GoExchangeToCashMATIC.address);\n          setDexContractAbi(GoExchangeToCashMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensMumbai);\n          break;\n\n        case 56:\n          //BNB(BSC)\n          setDexContractAddress(GoExchangeToCashBSC.address);\n          setDexContractAbi(GoExchangeToCashBSC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 10:\n          //OPTIMISM (currency: ETH)\n          setDexContractAddress(GoExchangeToCashOptimism.address);\n          setDexContractAbi(GoExchangeToCashOptimism.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 42161:\n          //ARBITRUM\n          setDexContractAddress(GoExchangeToCashArbitrum.address);\n          setDexContractAbi(GoExchangeToCashArbitrum.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        default:\n          console.warn('Please choose a token!');\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n\n  // useEffect(() => {\n  //   if (activeTransaction === transactions[0]?.name && !isPayCash) {\n  //     getClientsTransacts()\n  //   }\n  //   if (activeTransaction === transactions[1]?.name && !isGetCrypto) {\n  //     getClientsTransacts()\n  //   }\n  //   if (activeTransaction === transactions[2]?.name && !isCompleted) {\n  //     getClientsTransacts()\n  //   }\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [activeTransaction, isPayCash, isGetCrypto, isCompleted]);\n\n  async function getClientsTransacts() {\n    let dexContract = new ethers.Contract(\n      dexContractAddress,\n      dexContractAbi,\n      signer.data // should be just \"signer\" if using windows.ethereum\n    );\n\n    let items;\n\n    let transaction;\n    switch (activeTransaction) {\n      case 'Pay Cash':\n        console.info('fetching Pay Cash transactions');\n        transaction = await dexContract.getBanksHasNotPaidCash();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = i.dexShare.toString();\n            // let dexShare = ethers.utils.formatUnits(i.dexShare.toString(), 'ether');\n            let item1 = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCrypto: i.clientPaidCrypto,\n              bankPaidCash: i.bankPaidCash,\n              clientReceivedCash: i.clientReceivedCash,\n              bankReceivedCrypto: i.bankReceivedCrypto,\n              started: i.started,\n            };\n\n            return item1;\n            //sumCryptoPrice += Number(CryptoPrice);\n            // sumDexShare += Number(dexShare);\n          })\n        );\n\n        const bankDidNotPayCash = items.filter(\n          (item) => item.bankPaidCash === false\n        );\n        updateDataBankPayCash(bankDidNotPayCash);\n        // setHasDataFetched(true);\n        setIsPayCash(true);\n        break;\n\n      case 'Get Crypto':\n        console.info('fetching Get Crypto transactions');\n        transaction = await dexContract.getBanksHasNotReceivedCrypto();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = i.dexShare.toString();\n            // let dexShare = ethers.utils.formatUnits(i.dexShare.toString(), 'ether');\n            let item1 = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCrypto: i.clientPaidCrypto,\n              bankPaidCash: i.bankPaidCash,\n              clientReceivedCash: i.clientReceivedCash,\n              bankReceivedCrypto: i.bankReceivedCrypto,\n              started: i.started,\n            };\n\n            return item1;\n            //sumCryptoPrice += Number(CryptoPrice);\n            // sumDexShare += Number(dexShare);\n          })\n        );\n\n        const bankDidNotReceiveCrypto = items.filter(\n          (item) => item.bankReceivedCrypto === false\n        );\n        updateDataBankGetCrypto(bankDidNotReceiveCrypto);\n        // setHasDataFetched(true);\n        setIsGetCrypto(true);\n        break;\n\n      case 'Completed':\n        console.info('fetching Completed transactions');\n        transaction = await dexContract.getBanksCompletedTransacts();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = i.dexShare.toString();\n            // let dexShare = ethers.utils.formatUnits(i.dexShare.toString(), 'ether');\n            let item1 = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCrypto: i.clientPaidCrypto,\n              bankPaidCash: i.bankPaidCash,\n              clientReceivedCash: i.clientReceivedCash,\n              bankReceivedCrypto: i.bankReceivedCrypto,\n              started: i.started,\n            };\n\n            return item1;\n            //sumCryptoPrice += Number(CryptoPrice);\n            // sumDexShare += Number(dexShare);\n          })\n        );\n        const bankCompletedTransaction = items.filter(\n          (item) => item.completed === true\n        );\n        updateDataBankCompletedTransacts(bankCompletedTransaction);\n        // setHasDataFetched(true);\n        setIsCompleted(true);\n        break;\n\n      default:\n        console.log('getClientsTransacts', 'in default');\n        transaction = ['Please choose a transaction!'];\n    }\n  }\n\n  // useEffect(() => {\n  //   if (activeTrade) {\n  //     setActiveFee(activeTrade?.dexShare);\n  //   }\n  // }, [activeTrade]);\n\n  async function bankPayCash() {\n    if (activeTrade?.txId > 0) {\n      try {\n        let dexContract = new ethers.Contract(\n          dexContractAddress,\n          dexContractAbi,\n          signer.data // should be just \"signer\" if using windows.ethereum\n        );\n\n        let transaction = await dexContract.bankPayCash(activeTrade?.txId);\n        await transaction.wait();\n\n        alert('Transaction completed. You have Paid the Client in Cash!');\n      } catch (e) {\n        console.error('Upload Error' + e);\n        alert('Upload Error' + e);\n      }\n    }\n  }\n\n  async function bankGetCrypto() {\n    if (activeTrade?.txId > 0) {\n      try {\n        let dexContract = new ethers.Contract(\n          dexContractAddress,\n          dexContractAbi,\n          signer.data // should be just \"signer\" if using windows.ethereum\n        );\n\n        let transaction = await dexContract.bankGetCrypto(\n          activeTrade?.txId,\n          activeTrade?.dexShare,\n          {\n            value: activeTrade?.dexShare, // receive dexshare\n            gasLimit: 3000000,\n          }\n        );\n        await transaction.wait();\n\n        alert('Transaction completed. You have Received the Crypto!');\n      } catch (e) {\n        console.error('Upload Error' + e);\n        alert('Upload Error' + e);\n      }\n    }\n  }\n\n  // DexCreateOrder => DexMarketplace => NFTTile => DexNfTpage=> act\n\n  useEffect(() => {\n    chainId && contractSwitcher(); // contract Switcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chainId]);\n\n  useEffect(() => {\n    chainId && activeTransaction !== undefined && getClientsTransacts();\n    console.log('activeTransaction type', activeTransaction);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTransaction, activeChainAddress]);\n\n  return (\n    <>\n      {isConnected ? (\n        <div>\n          <div className=\"flex flex-row gap-3 items-center\">\n            <h5 className=\"text-gray-500\">Transaction Type:</h5>\n            <div\n              className=\"my-3 flex flex-row gap-2 start\"\n              onChange={(e) => setActiveTransaction(e.target.value)}\n            >\n              {transactions.map((tab) => (\n                <label key={tab.value}>\n                  <input\n                    type=\"radio\"\n                    id=\"tab\"\n                    name=\"tab\"\n                    value={tab.name}\n                    className=\"peer sr-only\"\n                  />\n                  <span\n                    className={`px-2 py-1 rounded-md cursor-pointer ${\n                      tab.name === activeTransaction\n                        ? 'bg-sky-600 text-gray-200'\n                        : 'bg-black/50 text-gray-200/30'\n                    } border border-transparent peer-hover:border-gray-200/30 peer-checked:bg-sky-600 peer-checked:hover:border-transparent peer-checked:text-gray-200`}\n                  >\n                    {tab.name}\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n          <div className=\"overflow-x-auto relative\">\n            {/* Pay Cash */}\n            {activeTransaction === transactions[0].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={['Tx Id', 'client', 'amount', '', 'action']}\n                />\n                <TableExchangeBody>\n                  {dataBankPayCash.length > 0 ? (\n                    dataBankPayCash.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>{truncateEthAddress(row?.client)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {row?.bankPaidCash === true ? (\n                                  <button type=\"button\">\n                                    Paid\n                                  </button>\n                                ) : (\n                                  <button\n                                    type=\"button\"\n                                    className=\"bg-red-600 text-white cursor-pointer px-2 py-1\"\n                                    onClick={() => {\n                                      bankPayCash();\n                                    }}\n                                  >\n                                    Mark as cash paid\n                                  </button>\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isPayCash ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataBankPayCash.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>No active transactions</td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n            {/* Get Crypto */}\n            {activeTransaction === transactions[1].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={['Tx Id', 'client', 'amount', '', 'action']}\n                />\n                <TableExchangeBody>\n                  {dataBankGetCrypto.length > 0 ? (\n                    dataBankGetCrypto.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>{truncateEthAddress(row?.client)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {row?.bankReceivedCrypto === true ? (\n                                  <button type=\"button\">Received</button>\n                                ) : (\n                                  <button\n                                    type=\"button\"\n                                    className=\"bg-red-600 text-white cursor-pointer px-2 py-1\"\n                                    onClick={() => {\n                                      bankGetCrypto();\n                                    }}\n                                  >\n                                    Get Crypto\n                                  </button>\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isGetCrypto ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataBankPayCash.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>No active transactions</td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n\n            {/* Completed */}\n            {activeTransaction === transactions[2].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={['Tx Id', 'client', 'amount', '', 'completed']}\n                />\n                <TableExchangeBody>\n                  {dataBankCompletedTransacts.length > 0 ? (\n                    dataBankCompletedTransacts.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>{truncateEthAddress(row?.client)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {row.completed ? (\n                                  <MdDoneAll />\n                                ) : (\n                                  <MdDone />\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isCompleted ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataBankCompletedTransacts.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>No transaction data</td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\n// import BankGetCryptoTile from \"./BankGetCryptoTile\";\n// import BankPayCashTile from \"./BankPayCashTile\";\n// import BankCompletedTransactTile from \"./BankCompletedTransactTile\";\n// import axios from \"axios\";\nimport { ethers } from 'ethers';\nimport Erc20 from '../../../engine/erc20.json';\nimport { MdDone, MdDoneAll } from 'react-icons/md';\nimport {\n  TableExchange,\n  TableExchangeHead,\n  TableExchangeBody,\n} from '../../../TableExchange';\n\n//================={wallet connect}===================\nimport { useAccount, useSigner, useSignMessage } from 'wagmi';\n\n//================={Exchange To Cash Contracts}===================\nimport GoExchangeToCryptoETH from '../../../../Contracts/GoExchangeToCryptoETH.json';\nimport GoExchangeToCryptoMATIC from '../../../../Contracts/GoExchangeToCryptoMATIC.json';\nimport GoExchangeToCryptoBSC from '../../../../Contracts/GoExchangeToCryptoBSC.json';\nimport GoExchangeToCryptoArbitrum from '../../../../Contracts/GoExchangeToCryptoArbitrum.json';\nimport GoExchangeToCryptoOptimism from '../../../../Contracts/GoExchangeToCryptoOptimism.json';\nimport GoExchangeToCryptoGoerliETH from '../../../../Contracts/GoExchangeToCryptoGoerliETH.json';\nimport GoExchangeToCryptoTBNB from '../../../../Contracts/GoExchangeToCryptoTBNB.json';\nimport GoExchangeToCryptoMumbaiMATIC from '../../../../Contracts/GoExchangeToCryptoMumbaiMATIC.json';\nimport truncateEthAddress from '../../../../utils/TruncateEthAddress';\n\n// Drop down menu\nconst transactions = [\n  {\n    name: 'Get Cash',\n    value: 1,\n  },\n  {\n    name: 'Pay Crypto',\n    value: 2,\n  },\n  {\n    name: 'Completed',\n    value: 3,\n  },\n];\n\nexport default function BankPageToCrypto({\n  walletAddress,\n  chainId,\n  tokensGoerli,\n  tokensMumbai,\n}) {\n  const { address, connector, isConnected } = useAccount();\n  const [tokens, setTokens] = useState([]);\n  const [dataBankGetCash, updateDataBankGetCash] = useState([]);\n  const [dataBankPayCrypto, updateDataBankPayCrypto] = useState([]);\n  const [dataBankCompletedTransacts, updateDataBankCompletedTransacts] =\n    useState([]);\n  const [dexRoyaltyValue, setDexRoyaltyValue] = useState(0.1);\n  const [dexContractAddress, setDexContractAddress] = useState('');\n  const [dexContractAbi, setDexContractAbi] = useState([]);\n  const [quote, setQuote] = useState();\n  const [activeChainDecimals, setActiveChainDecimals] = useState();\n  const [activeChainAddress, setActiveChainAddress] = useState();\n  const [activeTransaction, setActiveTransaction] = useState();\n  const [hasDataFetched, setHasDataFetched] = useState(false);\n  const [activeTrade, setActiveTrade] = useState(null);\n  console.log({ activeTrade: activeTrade });\n  const [isGetCash, setIsGetCash] = useState(false);\n  const [isPayCrypto, setIsPayCrypto] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const [transferStatus, setTransferStatus] = useState({\n    status: '',\n    message: '',\n  });\n  // const [activeFee, setActiveFee] = useState(null);\n  // console.log({ activeFee: activeFee ? activeFee : \"\" });\n\n  //==================={wallet connect}==============================\n  const signer = useSigner(); // use signer.data for ethers.Contract\n  let message = `\n  Govercity Connect >>\n  Transact: Transfer\n  Address: ${walletAddress}\n  `;\n  const { data, signMessage } = useSignMessage({ message });\n\n  function contractSwitcher() {\n    //e.preventDefault();\n\n    //==================={TEST NETS}===============================\n    // GOERLIETH: Chainid = 5 Currency: ETH\n    // Mumbai Matic: Chainid = 8001 Currency: MATIC\n    // Binance Test Smart Chain: Chainid = 97 Currency: BNB\n\n    //==================={MAIN NETS}===============================\n    // ETH: Chainid = 1 Currency: ETH\n    // Polygon Matic: Chainid = 137 Currency: MATIC\n    // Binance Smart Chain: Chainid = 56 Currency: BNB\n    // Arbitrum One: Chain: Chainid = 42161 Currency: ETH\n    // Optimism: Chain: Chainid = 10 Currency: ETH\n\n    //let chainId = chain.id;\n\n    //let chainId = chain?.id;\n\n    //=======get Crypto Contract Switcher\n    try {\n      switch (chainId) {\n        case 5:\n          //GOERLIETH\n          setDexContractAddress(GoExchangeToCryptoGoerliETH.address);\n          setDexContractAbi(GoExchangeToCryptoGoerliETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 80001:\n          //MUMBAIMATIC\n          setDexContractAddress(GoExchangeToCryptoMumbaiMATIC.address);\n          setDexContractAbi(GoExchangeToCryptoMumbaiMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensMumbai);\n          break;\n\n        case 97:\n          //TBNB\n          setDexContractAddress(GoExchangeToCryptoTBNB.address);\n          setDexContractAbi(GoExchangeToCryptoTBNB.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 1:\n          //ETH\n          setDexContractAddress(GoExchangeToCryptoETH.address);\n          setDexContractAbi(GoExchangeToCryptoETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 137:\n          //MATIC\n          setDexContractAddress(GoExchangeToCryptoMATIC.address);\n          setDexContractAbi(GoExchangeToCryptoMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensMumbai);\n          break;\n\n        case 56:\n          //BNB(BSC)\n          setDexContractAddress(GoExchangeToCryptoBSC.address);\n          setDexContractAbi(GoExchangeToCryptoBSC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 10:\n          //OPTIMISM (currency: ETH)\n          setDexContractAddress(GoExchangeToCryptoOptimism.address);\n          setDexContractAbi(GoExchangeToCryptoOptimism.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        case 42161:\n          //ARBITRUM\n          setDexContractAddress(GoExchangeToCryptoArbitrum.address);\n          setDexContractAbi(GoExchangeToCryptoArbitrum.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexRoyaltyValue(0.1);\n          setTokens(tokensGoerli);\n          break;\n\n        default:\n          console.warn('Please choose a token!');\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    if (isGetCash) {\n      setIsPayCrypto(false);\n      setIsCompleted(false);\n    }\n    if (isPayCrypto) {\n      setIsGetCash(false);\n      setIsCompleted(false);\n    }\n    if (isCompleted) {\n      setIsCompleted(false);\n    }\n  }, [isGetCash, isPayCrypto, isCompleted]);\n\n  async function getClientsTransacts() {\n    let dexContract = new ethers.Contract(\n      dexContractAddress,\n      dexContractAbi,\n      signer.data // should be just \"signer\" if using windows.ethereum\n    );\n    let items;\n\n    let transaction;\n\n    switch (activeTransaction) {\n      case 'Get Cash':\n        console.info('Fetching Get Cash transactions');\n        transaction = await dexContract.getBanksHasNotReceivedCash();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            // let CryptoPrice = ethers.utils.formatUnits(\n            //   i.CryptoPrice.toString(),\n            //   'ether'\n            // );\n            // let dexShare = ethers.utils.formatUnits(\n            //   i.dexShare.toString(),\n            //   'ether'\n            // );\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let CryptoPriceRaw = i.CryptoPrice.toString();\n            let dexShare = i.dexShare.toString();\n            let item = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              CryptoPriceRaw,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCash: i.clientPaidCash,\n              bankReceivedCash: i.bankReceivedCash,\n              bankPaidCrypto: i.bankPaidCrypto,\n              clientReceivedCrypto: i.clientReceivedCrypto,\n              started: i.started,\n            };\n            //========================{GENERAL STRUCTS}=========================\n\n            //sumCryptoPrice += Number(CryptoPrice);\n            // sumDexShare += Number(dexShare);\n            return item;\n          })\n        );\n        const bankDidNotReceiveCash = items.filter(\n          (item) => item.bankReceivedCash === false\n        );\n        updateDataBankGetCash(bankDidNotReceiveCash);\n        setIsGetCash(true);\n        break;\n\n      case 'Pay Crypto':\n        console.info('Fetching Pay Crypto transactions');\n        transaction = await dexContract.getBanksHasNotPaidCrypto();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = ethers.utils.formatUnits(\n              i.dexShare.toString(),\n              'ether'\n            );\n            let item = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCash: i.clientPaidCash,\n              bankReceivedCash: i.bankReceivedCash,\n              bankPaidCrypto: i.bankPaidCrypto,\n              clientReceivedCrypto: i.clientReceivedCrypto,\n              started: i.started,\n            };\n            //========================{GENERAL STRUCTS}=========================\n\n            //sumCryptoPrice += Number(CryptoPrice);\n            // sumDexShare += Number(dexShare);\n            return item;\n          })\n        );\n        const bankDidNotPayCrypto = items.filter(\n          (item) =>\n            item.bankReceivedCash === true && item.bankPaidCrypto === false\n        );\n        updateDataBankPayCrypto(bankDidNotPayCrypto);\n        setIsPayCrypto(true);\n        break;\n\n      case 'Completed':\n        console.info('Fetching Completed transactions');\n        transaction = await dexContract.getBanksCompletedTransacts();\n        items = await Promise.all(\n          transaction.map(async (i) => {\n            let CryptoPrice = ethers.utils.formatUnits(\n              i.CryptoPrice.toString(),\n              'ether'\n            );\n            let dexShare = ethers.utils.formatUnits(\n              i.dexShare.toString(),\n              'ether'\n            );\n            let item = {\n              txId: i.txId.toNumber(),\n              token: i.token,\n              client: i.client,\n              bank: i.bank,\n              CryptoPrice,\n              tokenDecimals: i.tokenDecimals,\n              dexShare,\n              endBlock: i.endBlock,\n              completed: i.completed,\n              clientPaidCash: i.clientPaidCash,\n              bankReceivedCash: i.bankReceivedCash,\n              bankPaidCrypto: i.bankPaidCrypto,\n              clientReceivedCrypto: i.clientReceivedCrypto,\n              started: i.started,\n            };\n            //========================{GENERAL STRUCTS}=========================\n\n            //sumCryptoPrice += Number(CryptoPrice);\n            // sumDexShare += Number(dexShare);\n            return item;\n          })\n        );\n        const bankCompletedTransaction = items.filter(\n          // (item) => item.bankPaidCrypto === true\n          (item) => item.completed === true\n        );\n        updateDataBankCompletedTransacts(bankCompletedTransaction);\n        setIsCompleted(true);\n        break;\n\n      default:\n        console.warn('Please choose a transaction!');\n    }\n\n    console.log(transaction);\n\n    //Fetch all the details of every NFT from the contract and display\n  }\n\n  // useEffect(() => {\n  //   if (activeTransaction === transactions[0]?.name && !isPayCrypto) {\n  //     getClientsTransacts()\n  //   }\n  //   if (activeTransaction === transactions[1]?.name && !isGetCash) {\n  //     getClientsTransacts()\n  //   }\n  //   if (activeTransaction === transactions[2]?.name && !isCompleted) {\n  //     getClientsTransacts()\n  //   }\n  // // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [activeTransaction, isPayCrypto, isGetCash, isCompleted]);\n\n  async function getApproval() {\n    // return if there is an ongoing transaction\n    if (transferStatus.status === 'inprogress') return;\n\n    //======= setting transaction status\n    setTransferStatus({\n      status: 'inprogress',\n      message: 'Transaction in progress...',\n    });\n\n    try {\n      let approval = await sendToken_approval();\n      // console.log(\"approval\", approval);\n      if (approval.hash) {\n        setTransferStatus({\n          status: 'inprogress',\n          message: 'Approval granted.',\n        });\n        let cashOrder = await bankReceiveCash();\n        console.log('cashOrder Status', cashOrder);\n      } else {\n        setTransferStatus({\n          status: 'error',\n          message: 'Approval declined',\n        });\n        console.error('approvalErr', approval);\n      }\n    } catch (e) {\n      if (e.code === 'ACTION_REJECTED') {\n        setTransferStatus({\n          status: 'error',\n          message: 'User rejected transaction',\n        });\n      } else if (e.code === 'UNPREDICTABLE_GAS_LIMIT') {\n        setTransferStatus({\n          status: 'error',\n          message: 'Error due to unpredictable gas limit',\n        });\n      } else {\n        setTransferStatus({\n          status: 'error',\n          message: 'An error occured',\n        });\n        console.error('transactionErr', e);\n      }\n    }\n  }\n\n  //==============================={sendToken_approval}===============================================\n  async function sendToken_approval() {\n    //========={signature}=====================\n    signMessage();\n    // setSignature(data);\n\n    let parsed = ethers.utils\n      .parseUnits(activeTrade?.CryptoPrice, '18')\n      .toString();\n    //eslint-disable-next-line no-undef\n    let amountStr = BigInt(parsed).toString();\n    console.info('amountStr', amountStr);\n\n    //======{Get Token Approval}=============================\n    const ERC20Contract = new ethers.Contract(\n      activeTrade?.token,\n      Erc20,\n      signer.data\n    );\n    const approval = await ERC20Contract.approve(\n      dexContractAddress.toString(),\n      amountStr\n    );\n\n    await approval.wait();\n    // console.info('approval', approval);\n    return approval;\n  }\n\n  async function bankReceiveCash() {\n    if (activeTrade?.txId > 0) {\n      try {\n        let dexContract = new ethers.Contract(\n          dexContractAddress,\n          dexContractAbi,\n          signer.data // should be just \"signer\" if using windows.ethereum\n        );\n\n        // let transaction = await dexContract.bankReceiveCash(\n        //   activeTrade?.txId,\n        //   activeTrade?.dexShare,\n        //   {\n        //     value: activeTrade?.dexShare, // receive dexshare\n        //     gasLimit: 3000000,\n        //   }\n        // );\n\n        let transaction = await dexContract.bankReceiveCash(\n          activeTrade?.txId,\n          // activeTrade?.CryptoPrice,\n          activeTrade?.CryptoPriceRaw,\n          activeTrade?.dexShare,\n          {\n            value: activeTrade?.dexShare, // receive dexshare\n            gasLimit: 3000000,\n          }\n        );\n        // await transaction.wait();\n\n        let sendTransaction = await transaction.wait();\n        if (sendTransaction.status === 1) {\n          setTransferStatus({\n            status: '200',\n            message: 'Transfer Successful',\n          });\n          // todo get transaction return value and pass it to <Transactions> component in Layout\n          // setNewTransaction({\n          //   amount: amount,\n          //   selectedBank: selectedBank,\n          //   token: selectedToken,\n          // });\n        }\n        console.log('sendTransaction', sendTransaction);\n        return sendTransaction;\n      } catch (e) {\n        if (e.code === 'CALL_EXCEPTION') {\n          setTransferStatus({\n            status: 'error',\n            message:\n              'An Error occurred. Please check if you have sufficient balance',\n          });\n        } else if (e.code === 'ACTION_REJECTED') {\n          setTransferStatus({\n            status: 'error',\n            message: 'User rejected transaction',\n          });\n        } else {\n          setTransferStatus({\n            status: 'error',\n            message: 'An Error occurred.',\n          });\n        }\n        console.error('dexSendToken', e);\n      }\n    }\n  }\n\n  // DexCreateOrder => DexMarketplace => NFTTile => DexNfTpage=> act\n\n  useEffect(() => {\n    chainId && contractSwitcher(); // contract Switcher\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chainId]);\n\n  useEffect(() => {\n    chainId && activeTransaction !== undefined && getClientsTransacts();\n    console.log('activeTransaction type', activeTransaction);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeTransaction, activeChainAddress]);\n\n  return (\n    <>\n      {isConnected ? (\n        <div>\n          <div className=\"flex flex-row gap-3 items-center\">\n            <h5 className=\"text-gray-500\">Transaction Type:</h5>\n            <div\n              className=\"my-3 flex flex-row gap-2 start\"\n              onChange={(e) => setActiveTransaction(e.target.value)}\n            >\n              {transactions.map((tab) => (\n                <label key={tab.value}>\n                  <input\n                    type=\"radio\"\n                    id=\"tab\"\n                    name=\"tab\"\n                    value={tab.name}\n                    className=\"peer sr-only\"\n                  />\n                  <span\n                    className={`px-2 py-1 rounded-md cursor-pointer ${\n                      tab.name === activeTransaction\n                        ? 'bg-sky-600 text-gray-200'\n                        : 'bg-black/50 text-gray-200/30'\n                    } border border-transparent peer-hover:border-gray-200/30 peer-checked:bg-sky-600 peer-checked:hover:border-transparent peer-checked:text-gray-200`}\n                  >\n                    {tab.name}\n                  </span>\n                </label>\n              ))}\n            </div>\n          </div>\n          <div className=\"overflow-x-auto relative\">\n            {/* Get Cash */}\n            {activeTransaction === transactions[0].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={['Tx Id', 'client', 'amount', '', 'action']}\n                />\n                <TableExchangeBody>\n                  {dataBankGetCash.length > 0 ? (\n                    dataBankGetCash.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>{truncateEthAddress(row?.client)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {activeTrade ? (\n                                  <button type=\"button\">\n                                    Mark as Cash Received\n                                  </button>\n                                ) : (\n                                  <button\n                                    type=\"button\"\n                                    className=\"bg-red-600 text-white cursor-pointer px-2 py-1\"\n                                    onClick={() => {\n                                      getApproval();\n                                    }}\n                                  >\n                                    Mark as Cash Received\n                                  </button>\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isGetCash ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataBankGetCash.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>No active transactions</td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n            {/* Pay Crypto */}\n            {activeTransaction === transactions[1].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={['Tx Id', 'client', 'amount', '', 'action']}\n                />\n                <TableExchangeBody>\n                  {dataBankPayCrypto.length > 0 ? (\n                    dataBankPayCrypto.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>{truncateEthAddress(row?.client)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {row.bankPaidCrypto ? (\n                                  <MdDoneAll />\n                                ) : (\n                                  <MdDone />\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isPayCrypto ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataBankPayCrypto.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>No active transactions</td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n\n            {/* Completed */}\n            {activeTransaction === transactions[2].name && (\n              <TableExchange>\n                <TableExchangeHead\n                  headArray={['Tx Id', 'client', 'amount', '', 'completed']}\n                />\n                <TableExchangeBody>\n                  {dataBankCompletedTransacts.length > 0 ? (\n                    dataBankCompletedTransacts.map((row, idx) => (\n                      <tr\n                        key={idx}\n                        className=\"border-b border-gray-700 bg-transparent even:bg-gray-700/30 hover:bg-gray-400/20\"\n                        onClick={() => {\n                          setActiveTrade(row);\n                        }}\n                      >\n                        <>\n                          {row?.txId > 0 ? (\n                            <>\n                              <th\n                                scope=\"row\"\n                                className=\"py-4 px-6 font-medium whitespace-nowrap text-white\"\n                              >\n                                {row?.txId} {/* txId */}\n                              </th>\n                              {console.info(row)}\n                              <td>{truncateEthAddress(row?.client)}</td>\n                              <td>\n                                <span>{row?.CryptoPrice}</span>{' '}\n                                <span>\n                                  {\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.symbol\n                                  }\n                                </span>\n                              </td>\n                              <td>\n                                <img\n                                  src={\n                                    tokens.find(\n                                      (token) =>\n                                        row?.token === token.testAddress\n                                    )?.logoURI\n                                  }\n                                  alt=\"\"\n                                  className=\"w-[25px] h-[25px]\"\n                                />\n                              </td>\n                              <td>\n                                {row.clientReceivedCash ? (\n                                  <MdDoneAll />\n                                ) : (\n                                  <MdDone />\n                                )}\n                              </td>\n                            </>\n                          ) : null}\n                        </>\n                      </tr>\n                    ))\n                  ) : !isCompleted ? (\n                    <tr>\n                      <td></td>\n                      <td></td>\n                      <td>Fetching transaction data</td>\n                      <td></td>\n                      <td></td>\n                    </tr>\n                  ) : (\n                    dataBankCompletedTransacts.length <= 0 && (\n                      <tr>\n                        <td></td>\n                        <td></td>\n                        <td>No transaction data</td>\n                        <td></td>\n                        <td></td>\n                      </tr>\n                    )\n                  )}\n                </TableExchangeBody>\n              </TableExchange>\n            )}\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n}\n","import React, {useState} from \"react\";\n// import axios from \"axios\";\n// import {useSigner, useSignMessage} from \"@web3modal/react\";\n// import {ethers} from \"ethers\";\n// import Erc20 from \"../../engine/erc20.json\";\n// import {TokenListButton, TransactButton} from \"../../Buttons\";\n// import Modal from \"../../Modal\";\n// import Spinner from \"../../Spinner\";\nimport tokensGoerli from \"../../../res/tokensGoerli\";\nimport tokensMumbai from \"../../../res/tokensMumbai\";\nimport BankPageToCash from \"../ExchangeToCash/Bank/BankPageToCash\";\nimport BankPageToCrypto from \"../ExchangeToCrypto/Bank/BankPageToCrypto\";\n\nconst style = {\n\twithdrawOptions: `px-4 w-full border text-gray-300 text-xl\n        hover:border-gray-400 transition-colors duration-300`,\n};\n\n// withdraw types\nconst withdrawTypes = [\"getCash\", \"getCrypto\"];\n\nconst BankExchange = ({walletAddress, chainId}) => {\n\tconst [withdrawType, setWithdrawType] = useState(withdrawTypes[0]);\n\n\t// function contractSwitcher() {\n\t// \t//e.preventDefault();\n\n\t// \t//==================={TEST NETS}===============================\n\t// \t// GOERLIETH: Chainid = 5 Currency: ETH\n\t// \t// Mumbai Matic: Chainid = 8001 Currency: MATIC\n\t// \t// Binance Test Smart Chain: Chainid = 97 Currency: BNB\n\n\t// \t//==================={MAIN NETS}===============================\n\t// \t// ETH: Chainid = 1 Currency: ETH\n\t// \t// Polygon Matic: Chainid = 137 Currency: MATIC\n\t// \t// Binance Smart Chain: Chainid = 56 Currency: BNB\n\t// \t// Arbitrum One: Chain: Chainid = 42161 Currency: ETH\n\t// \t// Optimism: Chain: Chainid = 10 Currency: ETH\n\n\t// \t//let chainId = chain.id;\n\n\t// \t//let chainId = chain?.id;\n\n\t// \t//=======get Crypto Contract Switcher\n\n\t// \tif (withdrawType === \"getCrypto\") {\n\t// \t\ttry {\n\t// \t\t\tswitch (chainId) {\n\t// \t\t\t\tcase 5:\n\t// \t\t\t\t\t//GOERLIETH\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoGoerliETH.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoGoerliETH.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 80001:\n\t// \t\t\t\t\t//MUMBAIMATIC\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoMumbaiMATIC.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoMumbaiMATIC.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 97:\n\t// \t\t\t\t\t//TBNB\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoTBNB.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoTBNB.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x4fabb145d64652a948d72533023f6e7a623c7c53\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 1:\n\t// \t\t\t\t\t//ETH\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoETH.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoETH.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 137:\n\t// \t\t\t\t\t//MATIC\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoMATIC.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoMATIC.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 56:\n\t// \t\t\t\t\t//BNB(BSC)\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoBSC.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoBSC.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x4fabb145d64652a948d72533023f6e7a623c7c53\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 10:\n\t// \t\t\t\t\t//OPTIMISM (currency: ETH)\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoOptimism.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoOptimism.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 42161:\n\t// \t\t\t\t\t//ARBITRUM\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCryptoArbitrum.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCryptoArbitrum.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tdefault:\n\t// \t\t\t\t\tconsole.warn(\"Please choose a token!\");\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t}\n\t// \t\t} catch (error) {\n\t// \t\t\tconsole.log(error);\n\t// \t\t}\n\t// \t\t//=======get Cash Contract Switcher\n\t// \t} else if (withdrawType === \"getCash\") {\n\t// \t\ttry {\n\t// \t\t\tswitch (chainId) {\n\t// \t\t\t\tcase 5:\n\t// \t\t\t\t\t//GOERLIETH\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashGoerliETH.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashGoerliETH.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 80001:\n\t// \t\t\t\t\t//MUMBAIMATIC\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashMumbaiMATIC.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashMumbaiMATIC.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 97:\n\t// \t\t\t\t\t//TBNB\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashTBNB.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashTBNB.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x4fabb145d64652a948d72533023f6e7a623c7c53\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 1:\n\t// \t\t\t\t\t//ETH\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashETH.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashETH.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 137:\n\t// \t\t\t\t\t//MATIC\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashMATIC.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashMATIC.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 56:\n\t// \t\t\t\t\t//BNB(BSC)\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashBSC.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashBSC.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0x4fabb145d64652a948d72533023f6e7a623c7c53\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 10:\n\t// \t\t\t\t\t//OPTIMISM (currency: ETH)\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashOptimism.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashOptimism.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tcase 42161:\n\t// \t\t\t\t\t//ARBITRUM\n\t// \t\t\t\t\tsetDexContractAddress(GoExchangeToCashArbitrum.address);\n\t// \t\t\t\t\tsetDexContractAbi(GoExchangeToCashArbitrum.abi);\n\t// \t\t\t\t\tsetActiveChainDecimals(18);\n\t// \t\t\t\t\tsetActiveChainAddress(\"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc\");\n\t// \t\t\t\t\tsetDexRoyaltyValue(0.1);\n\t// \t\t\t\t\tbreak;\n\n\t// \t\t\t\tdefault:\n\t// \t\t\t\t\tconsole.warn(\"Please choose a token!\");\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t}\n\t// \t\t} catch (error) {\n\t// \t\t\tconsole.log(error);\n\t// \t\t}\n\t// \t} else {\n\t// \t\tconsole.warn(\"Please choose a withdrawal option\");\n\t// \t}\n\t// }\n\n\t//   return (\n\t//     <>\n\t//       <section className=\"flex flex-col items-center\">\n\t//         <div\n\t//           className={`px-4 py-3 w-full md:w-[600px] rounded-3xl parentBgColor`}\n\t//         >\n\t//           <div className=\"font-bold text-lg text-gray-200\">\n\t//             <span>Exchange</span>\n\t//           </div>\n\t//           <section className=\"relative mt-4\">\n\t//             <div className=\"flex flex-col\">\n\t//               <div className=\"mt-1 flex flex-row w-full h-[50px] justify-center rounded-xl optionSectionColor\">\n\t//                 <button\n\t//                   id=\"0\"\n\t//                   className={`rounded-tl-xl rounded-bl-xl ${\n\t//                     style.withdrawOptions\n\t//                   }\n\t//                                         ${\n\t//                                           withdrawType === withdrawTypes[0] &&\n\t//                                           'border-gray-400'\n\t//                                         }`}\n\t//                   onClick={() => setWithdrawType(withdrawTypes[0])}\n\t//                 >\n\t//                   Cash\n\t//                 </button>\n\t//                 <button\n\t//                   id=\"1\"\n\t//                   className={`rounded-tr-xl rounded-br-xl ${\n\t//                     style.withdrawOptions\n\t//                   }\n\t//                                         ${\n\t//                                           withdrawType === withdrawTypes[1] &&\n\t//                                           'border-gray-400'\n\t//                                         }`}\n\t//                   onClick={() => setWithdrawType(withdrawTypes[1])}\n\t//                 >\n\t//                   Crypto\n\t//                 </button>\n\t//               </div>\n\t//               <section className=\"mt-6 flex flex-col\"></section>\n\n\t//               {/* transfer status section */}\n\t//               {transferStatus.status !== '' && (\n\t//                 <section\n\t//                   className={`mt-3 px-3 py-2 w-full h-fit flex flex-row gap-6 justify-center rounded-lg\n\t//                 ${\n\t//                   transferStatus.status === '200'\n\t//                     ? 'success'\n\t//                     : transferStatus.status === '309'\n\t//                     ? 'warn'\n\t//                     : transferStatus.status === 'inprogress'\n\t//                     ? 'info'\n\t//                     : 'error'\n\t//                 }\n\t//                             `}\n\t//                   onClick={() => setTransferStatus({ status: '', message: '' })}\n\t//                 >\n\t//                   {transferStatus.message}\n\t//                 </section>\n\t//               )}\n\n\t//               <section className=\"flex flex-row gap-3\">\n\t//                 <h3 className=\"text-gray-600\">Transaction Type</h3>\n\t//                 <div\n\t//                   className=\"my-3 flex flex-row gap-2 start\"\n\t//                   onChange={(e) => setSelectedTab(e.target.value)}\n\t//                 >\n\t//                   {transactions.map((tab) => (\n\t//                     <label key={tab.value}>\n\t//                       <input\n\t//                         type=\"radio\"\n\t//                         id=\"tab\"\n\t//                         name=\"tab\"\n\t//                         value={tab.name}\n\t//                         className=\"peer sr-only\"\n\t//                       />\n\t//                       <span\n\t//                         className={`px-2 py-1 rounded-md cursor-pointer ${\n\t//                           tab.name === selectedTab\n\t//                             ? 'bg-black text-gray-200'\n\t//                             : 'bg-black/50 text-gray-200/30'\n\t//                         } border border-transparent peer-hover:border-gray-200/30 peer-checked:bg-black peer-checked:hover:border-transparent peer-checked:text-gray-200`}\n\t//                       >\n\t//                         {tab.name}\n\t//                       </span>\n\t//                     </label>\n\t//                   ))}\n\t//                 </div>\n\t//               </section>\n\n\t//               <div className=\"mx-auto mt-6 w-fit\">\n\t//                 <TransactButton\n\t//                   // Not doing type checking for value and walletAddress\n\t//                   // eslint-disable-next-line eqeqeq\n\t//                   disabled={\n\t//                     walletAddress.length <= 5 ||\n\t//                     Number(amount) <= 0 ||\n\t//                     !Object.keys(selectedBank).length > 0 ||\n\t//                     transferStatus.status === 'inprogress'\n\t//                       ? true\n\t//                       : false\n\t//                   }\n\t//                   onClick={() => proceed()}\n\t//                 >\n\t//                   {transferStatus.status !== 'inprogress' ? (\n\t//                     'Proceed'\n\t//                   ) : (\n\t//                     <Spinner />\n\t//                   )}\n\t//                 </TransactButton>\n\t//                 {/* <button\n\t// \t\t\t\t\t\t\t\t\ttype=\"button\"\n\t// \t\t\t\t\t\t\t\t\tclassName=\"text-white border\"\n\t// \t\t\t\t\t\t\t\t\tonClick={() => setIsGetCashModalVisible(true)}\n\t// \t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\tCheck Cash Modal\n\t// \t\t\t\t\t\t\t\t</button>\n\t// \t\t\t\t\t\t\t\t<button\n\t// \t\t\t\t\t\t\t\t\ttype=\"button\"\n\t// \t\t\t\t\t\t\t\t\tclassName=\"text-white border\"\n\t// \t\t\t\t\t\t\t\t\tonClick={() => setIsGetCryptoModalVisible(true)}\n\t// \t\t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t\tCheck Crypto Modal\n\t// \t\t\t\t\t\t\t\t</button> */}\n\t//               </div>\n\t//             </div>\n\t//           </section>\n\t//         </div>\n\n\t//         {/*\n\t//                 ====================================================================\n\t//                     Modal\n\t//                 ====================================================================\n\t//                 */}\n\t//         <Modal\n\t//           visible={isTokenModalVisible}\n\t//           setVisible={setIsTokenModalVisible}\n\t//           title=\"Choose your withdraw token\"\n\t//         >\n\t//           <div className=\"w-[500px] h-fit max-h-[400px] overflow-y-scroll\">\n\t//             <div className=\"flex flex-row flex-wrap gap-8\">\n\t//               {filteredTokens?.map((t, idx) => (\n\t//                 <div\n\t//                   key={idx}\n\t//                   className={`px-3 py-2 bg-black/30 rounded-lg border ${\n\t//                     t.symbol === selectedToken?.symbol\n\t//                       ? 'border-gray-100 text-gray-100'\n\t//                       : 'border-white/10 text-gray-300'\n\t//                   } cursor-pointer hover:text-gray-100 hover:border-gray-100`}\n\t//                   onClick={() => {\n\t//                     setSelectedToken(t);\n\t//                     setIsTokenModalVisible(false);\n\t//                   }}\n\t//                 >\n\t//                   <img src={t.logoURI} alt=\"\" className=\"w-6 h-6\" />\n\t//                   <span>{t.symbol}</span>\n\t//                 </div>\n\t//               ))}\n\t//             </div>\n\t//           </div>\n\t//         </Modal>\n\t//         <Modal\n\t//           visible={isGetCashModalVisible}\n\t//           setVisible={setIsGetCashModalVisible}\n\t//           hideTitle={true}\n\t//         >\n\t//           {/* // todo pass in the correct transaction Id */}\n\t//           <GetCash\n\t//             walletAddress={walletAddress}\n\t//             chainId={chainId}\n\t//             txId={'ll'}\n\t//           />\n\t//         </Modal>\n\t//         <Modal\n\t//           visible={isGetCryptoModalVisible}\n\t//           setVisible={setIsGetCryptoModalVisible}\n\t//           hideTitle={true}\n\t//         >\n\t//           {/* // todo pass in the correct transaction Id */}\n\t//           <GetCrypto\n\t//             walletAddress={walletAddress}\n\t//             chainId={chainId}\n\t//             txId={'ll'}\n\t//           />\n\t//         </Modal>\n\t//       </section>\n\t//     </>\n\t//   );\n\n\treturn (\n\t\t<>\n\t\t\t<section className=\"flex flex-col items-center\">\n\t\t\t\t<div className={`px-4 py-3 w-full rounded-3xl parentBgColor`}>\n\t\t\t\t\t<div className=\"font-bold text-lg text-gray-200\">\n\t\t\t\t\t\t<span>Exchange</span>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<section className=\"mt-4\">\n\t\t\t\t\t\t<div className=\"mt-1 flex flex-row w-full h-[50px] justify-center rounded-xl optionSectionColor\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tid=\"0\"\n\t\t\t\t\t\t\t\tclassName={`rounded-tl-xl rounded-bl-xl ${style.withdrawOptions}\n\t                                         ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twithdrawType === withdrawTypes[0]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-gray-400\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-transparent\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\tonClick={() => setWithdrawType(withdrawTypes[0])}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCash Requests\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tid=\"1\"\n\t\t\t\t\t\t\t\tclassName={`rounded-tr-xl rounded-br-xl ${style.withdrawOptions}\n\t                                         ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twithdrawType === withdrawTypes[1]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"border-gray-400\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"border-transparent\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\t\tonClick={() => setWithdrawType(withdrawTypes[1])}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCrypto Requests\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t{/*\n                    ====================================================================\n                        Table section\n                    ====================================================================\n                    */}\n\t\t\t\t\t<section className=\"mt-5\">\n\t\t\t\t\t\t{withdrawType === withdrawTypes[0] && (\n\t\t\t\t\t\t\t<BankPageToCash walletAddress={walletAddress} chainId={chainId} tokensGoerli={tokensGoerli} tokensMumbai={tokensMumbai} />\n\t\t\t\t\t\t\t// <BankPageToCash tokensGoerli={tokensGoerli} tokensMumbai={tokensMumbai} />\n                        )}\n                        {withdrawType === withdrawTypes[1] && (\n                            <BankPageToCrypto walletAddress={walletAddress} chainId={chainId} tokensGoerli={tokensGoerli} tokensMumbai={tokensMumbai} />\n                        )}\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t</>\n\t);\n};\n\nexport default BankExchange;\n","import React from \"react\";\n\nconst TableExchange = ({children}) => {\n\treturn (<table className=\" w-full text-gray-400\">{children}</table>);\n};\n\nconst TableExchangeHead = ({headArray}) => {\n\treturn (\n\t\t<thead className=\"text-xs bg-gray-700 text-gray-400 uppercase\">\n\t\t\t<tr>\n\t\t\t\t{headArray.map((head, idx) => (\n\t\t\t\t\t<th key={idx} scope=\"col\" className=\"py-3 px-6\">\n\t\t\t\t\t\t{head}\n\t\t\t\t\t</th>\n\t\t\t\t))}\n\t\t\t</tr>\n\t\t</thead>\n\t);\n};\n\nconst TableExchangeBody = ({children}) => {\n\treturn (<tbody className=\"text-center\">{children}</tbody>);\n};\n\nexport {TableExchange, TableExchangeHead, TableExchangeBody};\n"],"names":["transactions","name","value","BankPageToCash","_ref","walletAddress","chainId","tokensGoerli","tokensMumbai","_useAccount","useAccount","isConnected","address","connector","_useState","useState","_useState2","_slicedToArray","tokens","setTokens","_useState3","_useState4","dataBankGetCrypto","updateDataBankGetCrypto","_useState5","_useState6","dataBankPayCash","updateDataBankPayCash","_useState7","_useState8","dataBankCompletedTransacts","updateDataBankCompletedTransacts","console","log","checkData","_useState9","_useState10","setDexRoyaltyValue","_useState11","_useState12","dexContractAddress","setDexContractAddress","_useState13","_useState14","dexContractAbi","setDexContractAbi","_useState15","_useState16","_useState17","_useState18","setActiveChainDecimals","_useState19","_useState20","activeChainAddress","setActiveChainAddress","_useState21","_useState22","activeTransaction","setActiveTransaction","_useState23","_useState24","_useState25","_useState26","isPayCash","setIsPayCash","_useState27","_useState28","isGetCrypto","setIsGetCrypto","_useState29","_useState30","isCompleted","setIsCompleted","_useState31","_useState32","activeTrade","setActiveTrade","signer","useSigner","_getClientsTransacts","_asyncToGenerator","_regeneratorRuntime","mark","_callee4","dexContract","items","transaction","bankDidNotPayCash","bankDidNotReceiveCrypto","bankCompletedTransaction","wrap","_context4","prev","next","ethers","data","t0","info","getBanksHasNotPaidCash","sent","Promise","all","map","_ref2","_callee","i","CryptoPrice","dexShare","item1","_context","toString","txId","toNumber","token","client","bank","tokenDecimals","endBlock","completed","clientPaidCrypto","bankPaidCash","clientReceivedCash","bankReceivedCrypto","started","abrupt","stop","_x","apply","arguments","filter","item","getBanksHasNotReceivedCrypto","_ref3","_callee2","_context2","_x2","getBanksCompletedTransacts","_ref4","_callee3","_context3","_x3","_bankPayCash","_callee5","_context5","bankPayCash","wait","alert","error","_bankGetCrypto","_callee6","_context6","bankGetCrypto","gasLimit","useEffect","GoExchangeToCashGoerliETH","GoExchangeToCashMumbaiMATIC","GoExchangeToCashTBNB","GoExchangeToCashETH","GoExchangeToCashMATIC","GoExchangeToCashBSC","GoExchangeToCashOptimism","GoExchangeToCashArbitrum","warn","contractSwitcher","undefined","getClientsTransacts","_jsx","_Fragment","children","_jsxs","className","onChange","e","target","tab","type","id","concat","TableExchange","TableExchangeHead","headArray","TableExchangeBody","length","row","idx","_tokens$find","_tokens$find2","onClick","scope","truncateEthAddress","find","testAddress","symbol","src","logoURI","alt","_tokens$find3","_tokens$find4","_tokens$find5","_tokens$find6","MdDoneAll","MdDone","BankPageToCrypto","dataBankGetCash","updateDataBankGetCash","dataBankPayCrypto","updateDataBankPayCrypto","isGetCash","setIsGetCash","isPayCrypto","setIsPayCrypto","_useState33","status","message","_useState34","transferStatus","setTransferStatus","_useSignMessage","useSignMessage","signMessage","bankDidNotReceiveCash","bankDidNotPayCrypto","getBanksHasNotReceivedCash","CryptoPriceRaw","clientPaidCash","bankReceivedCash","bankPaidCrypto","clientReceivedCrypto","getBanksHasNotPaidCrypto","_getApproval","approval","cashOrder","sendToken_approval","hash","bankReceiveCash","code","_sendToken_approval","parsed","amountStr","ERC20Contract","BigInt","Erc20","approve","_bankReceiveCash","_callee7","sendTransaction","_context7","GoExchangeToCryptoGoerliETH","GoExchangeToCryptoMumbaiMATIC","GoExchangeToCryptoTBNB","GoExchangeToCryptoETH","GoExchangeToCryptoMATIC","GoExchangeToCryptoBSC","GoExchangeToCryptoOptimism","GoExchangeToCryptoArbitrum","getApproval","style","withdrawTypes","withdrawType","setWithdrawType","head"],"sourceRoot":""}