{"version":3,"file":"static/js/668.df279f1c.chunk.js","mappings":"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","sources":["uiComponents/TokenBalance.jsx","uiComponents/MyTokenBalancesCard.jsx"],"sourcesContent":["import React from \"react\";\n\nconst TokenBalance = ({token}) => {\n\treturn (\n\t\t<div className=\"py-1 px-3 flex flex-col justify-center text-gray-200 rounded-md border-b border-white/10 cursor-default hover:border-black/40 hover:bg-black/40\">\n\t\t\t<div className=\"flex flex-row gap-3\">\n\t\t\t\t<span className=\"w-[40px] opacity-80\">\n\t\t\t\t\t<img src={token?.logoURI} alt=\"\" />\n\t\t\t\t</span>\n\n\t\t\t\t<div className=\"ml-auto flex flex-row gap-6 items-center mr-6 text-base font-leaner font-bold\">\n\t\t\t\t\t<span className=\"text-lg\">{token?.balance}</span>\n\t\t\t\t\t<span>{token?.symbol}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{/* <div className=\"mt-2 w-full h-[1px] bg-white/10\" /> */}\n\t\t</div>\n\t);\n};\n// const TokenBalanceOriginal = ({token}) => {\n// \treturn (\n// \t\t<div className=\"h-[50px] px-3 flex flex-col justify-center bg-black/40 text-white/70 rounded-md\">\n// \t\t\t<div className=\"flex flex-row gap-3\">\n// \t\t\t\t<span className=\"w-[40px] opacity-80\">\n// \t\t\t\t\t<img src={token?.logoURI} alt=\"\" />\n// \t\t\t\t</span>\n\n// \t\t\t\t<div className=\"ml-auto flex flex-row gap-6 items-center mr-6 text-xl font-leaner font-bold\">\n// \t\t\t\t\t<span className=\"text-2xl\">{token?.balance}</span>\n// \t\t\t\t\t<span>{token?.symbol}</span>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// };\n\nexport default TokenBalance;\n","import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { useAccount, useSigner } from 'wagmi';\n// import tokens from \"../res/tokens\";\nimport tokensGoerli from '../res/tokensGoerli';\nimport tokensMumbai from '../res/tokensMumbai';\nimport Erc20 from './engine/erc20.json';\nimport TokenBalance from './TokenBalance';\nimport Spinner from './Spinner';\n\n//================={All Deployed Contracts}===================\nimport GoTransferETH from '../Contracts/GoTransferETH.json';\nimport GoTransferMATIC from '../Contracts/GoTransferMATIC.json';\nimport GoTransferBSC from '../Contracts/GoTransferBSC.json';\nimport GoTransferArbitrum from '../Contracts/GoTransferArbitrum.json';\nimport GoTransferOptimism from '../Contracts/GoTransferOptimism.json';\nimport GoTransferGoerliETH from '../Contracts/GoTransferGoerliETH.json';\nimport GoTransferTBNB from '../Contracts/GoTransferTBNB.json';\nimport GoTransferMumbaiMATIC from '../Contracts/GoTransferMumbaiMATIC.json';\n\nconst tabs = ['deposited', 'wallet'];\n\nconst MyTokenBalancesCard = ({ walletAddress, chainId }) => {\n  const { address, isConnected } = useAccount();\n  const [selectedTab, setSelectedTab] = useState(tabs[0]);\n  const [isDepositedBalanceLoading, setIsDepositedBalanceLoading] =\n    useState(false);\n  const [isWalletBalanceLoading, setIsWalletBalanceLoading] = useState(false);\n  const [dexAddress, setDexAddress] = useState(0.0);\n  const [dexContractAddress, setDexContractAddress] = useState('');\n  const [dexContractAbi, setDexContractAbi] = useState([]);\n  const [activeChainDecimals, setActiveChainDecimals] = useState();\n  const [activeChainAddress, setActiveChainAddress] = useState();\n  const [activeChainTokens, setActiveChainTokens] = useState([]);\n  const [depositedBalances, setDepositedBalances] = useState([]);\n  const [walletBalances, setWalletBalances] = useState([]);\n\n  const isDeposited = localStorage.getItem('isDeposited')\n    ? JSON.parse(localStorage.getItem('isDeposited'))\n    : false;\n\n  const signer = useSigner();\n\n  function contractSwitcher() {\n    try {\n      switch (chainId) {\n        case 5:\n          //GOERLIETH\n          setDexContractAddress(GoTransferGoerliETH.address);\n          setDexContractAbi(GoTransferGoerliETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensGoerli); // Goerli Test net\n          break;\n\n        case 80001:\n          //MUMBAIMATIC\n          setDexContractAddress(GoTransferMumbaiMATIC.address);\n          setDexContractAbi(GoTransferMumbaiMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensMumbai); // Mumbai Test net\n          break;\n\n        case 97:\n          //TBNB\n          setDexContractAddress(GoTransferTBNB.address);\n          setDexContractAbi(GoTransferTBNB.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensGoerli);\n          break;\n\n        case 1:\n          //ETH\n          setDexContractAddress(GoTransferETH.address);\n          setDexContractAbi(GoTransferETH.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensGoerli);\n          break;\n\n        case 137:\n          //MATIC\n          setDexContractAddress(GoTransferMATIC.address);\n          setDexContractAbi(GoTransferMATIC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensMumbai);\n          break;\n\n        case 56:\n          //BNB(BSC)\n          setDexContractAddress(GoTransferBSC.address);\n          setDexContractAbi(GoTransferBSC.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0x4fabb145d64652a948d72533023f6e7a623c7c53');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensGoerli);\n          break;\n\n        case 10:\n          //OPTIMISM (currency: ETH)\n          setDexContractAddress(GoTransferOptimism.address);\n          setDexContractAbi(GoTransferOptimism.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensGoerli);\n          break;\n\n        case 42161:\n          //ARBITRUM\n          setDexContractAddress(GoTransferArbitrum.address);\n          setDexContractAbi(GoTransferArbitrum.abi);\n          setActiveChainDecimals(18);\n          setActiveChainAddress('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc');\n          setDexAddress('0xc830181708e768f264534B9AE8B0B9A24c1F477b');\n          setActiveChainTokens(tokensGoerli);\n          break;\n\n        default:\n          console.warn('Invalid chain selected');\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  //   useEffect(() => {\n  //     localStorage.setItem('isDeposited', JSON.stringify(isDepositedL));\n\n  //     // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   }, [isDepositedL]);\n\n  //   useEffect(() => {\n  //     if (isDeposited === true) {\n  //       getTokenBalances();\n  //       setIsDepositedL(false);\n  //     }\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  //   }, [isDeposited]);\n\n  //======================{START: Get Deposited balances}===================================\n  // async function getTokenBalanceUSDC() {\n  // \ttry {\n  // \t\tlet dexContract = new ethers.Contract(\n  // \t\t\tdexContractAddress,\n  // \t\t\tdexContractAbi,\n  // \t\t\tsigner.data // should be just \"signer\" if using windows.ethereum\n  // \t\t);\n\n  // \t\tconst token = tokens.find((t) => t.symbol.toLowerCase() === \"usdc\");\n  // \t\tconst balance = await dexContract.getBalanceByClient(\n  // \t\t\t// \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\", // Miannet\n  // \t\t\t// \"0x35241FD7824991CA9DD9ffd1930b8FbE4fc5c04C\" // Testnet\n  // \t\t\ttoken.testAddress\n  // \t\t);\n  // \t\t// console.log('Balance USDC: ' + ethers.utils.formatEther(balanceUSDC));\n  // \t\treturn {\n  // \t\t\tsymbol: token.symbol.toUpperCase(),\n  // \t\t\tbalance: ethers.utils.formatEther(balance),\n  // \t\t\tlogoURI: token?.logoURI,\n  // \t\t};\n  // \t} catch (e) {}\n  // }\n\n  // async function getTokenBalanceUSDT() {\n  // \ttry {\n  // \t\tlet dexContract = new ethers.Contract(\n  // \t\t\tdexContractAddress,\n  // \t\t\tdexContractAbi,\n  // \t\t\tsigner.data // should be just \"signer\" if using windows.ethereum\n  // \t\t);\n\n  // \t\tconst token = tokens.find((t) => t.symbol.toLowerCase() === \"usdt\");\n  // \t\tconst balance = await dexContract.getBalanceByClient(\n  // \t\t\t//\"0xdac17f958d2ee523a2206206994597c13d831ec7\", // Miannet\n  // \t\t\t// \"0x12196abC0A66a46484039297d7cB4cE0aaec4C98\" // Testnet\n  // \t\t\ttoken.testAddress\n  // \t\t);\n  // \t\t// console.log('Balance USDT: ' + ethers.utils.formatEther(balanceUSDT));\n  // \t\t// const token = tokens.filter(\n  // \t\t// \t(token) => token.symbol.toLowerCase() === \"usdt\"\n  // \t\t// );\n  // \t\treturn {\n  // \t\t\tsymbol: token.symbol.toUpperCase(),\n  // \t\t\tbalance: ethers.utils.formatEther(balance),\n  // \t\t\tlogoURI: token?.logoURI,\n  // \t\t};\n  // \t} catch (e) {}\n  // }\n\n  // async function getTokenBalanceTUSD() {\n  // \ttry {\n  // \t\tlet dexContract = new ethers.Contract(\n  // \t\t\tdexContractAddress,\n  // \t\t\tdexContractAbi,\n  // \t\t\tsigner.data // should be just \"signer\" if using windows.ethereum\n  // \t\t);\n\n  // \t\tconst token = tokens.find((t) => t.symbol.toLowerCase() === \"tusd\");\n  // \t\tconst balance = await dexContract.getBalanceByClient(\n  // \t\t\t//\"0x0000000000085d4780b73119b644ae5ecd22b376\", // Mainnet\n  // \t\t\t// \"0x39f73a34969EE25e654fc78Fd67ab0DbC9cDc76f\" // Testnet\n  // \t\t\ttoken.testAddress\n  // \t\t);\n  // \t\t// console.log('Balance TUSD: ' + ethers.utils.formatEther(balanceTUSD));\n\n  // \t\treturn {\n  // \t\t\tsymbol: token.symbol.toUpperCase(),\n  // \t\t\tbalance: ethers.utils.formatEther(balance),\n  // \t\t\tlogoURI: token?.logoURI,\n  // \t\t};\n  // \t} catch (e) {}\n  // }\n\n  // async function getTokenBalanceBUSD() {\n  // \ttry {\n  // \t\tlet dexContract = new ethers.Contract(\n  // \t\t\tdexContractAddress,\n  // \t\t\tdexContractAbi,\n  // \t\t\tsigner.data // should be just \"signer\" if using windows.ethereum\n  // \t\t);\n\n  // \t\tconst token = tokens.find((t) => t.symbol.toLowerCase() === \"busd\");\n  // \t\tconst balance = await dexContract.getBalanceByClient(\n  // \t\t\t//\"0x4fabb145d64652a948d72533023f6e7a623c7c53\", // Mainnet\n  // \t\t\t// \"0x826167F6dF0DD515CAc0762a6181bCa472F937Fc\" // Testnet\n  // \t\t\ttoken.testAddress\n  // \t\t);\n  // \t\t// console.log('Balance BUSD: ' + ethers.utils.formatEther(balanceBUSD));\n  // \t\treturn {\n  // \t\t\tsymbol: token.symbol.toUpperCase(),\n  // \t\t\tbalance: ethers.utils.formatEther(balance),\n  // \t\t\tlogoURI: token?.logoURI,\n  // \t\t};\n  // \t} catch (e) {}\n  // }\n\n  // async function getTokenBalanceDAI() {\n  // \ttry {\n  // \t\tlet dexContract = new ethers.Contract(\n  // \t\t\tdexContractAddress,\n  // \t\t\tdexContractAbi,\n  // \t\t\tsigner.data // should be just \"signer\" if using windows.ethereum\n  // \t\t);\n\n  // \t\t// const dai_address = tokens.find(t => t.symbol.toLowerCase() === 'dai').testAddress;\n\n  // \t\tconst token = tokens.find((t) => t.symbol.toLowerCase() === \"dai\");\n  // \t\tconst balance = await dexContract.getBalanceByClient(\n  // \t\t\t//\"0x6b175474e89094c44da98b954eedeac495271d0f\", // main\n  // \t\t\t// \"0x9744148D643E2CE62F452430593935Ec55002433\" // test\n  // \t\t\ttoken.testAddress\n  // \t\t);\n  // \t\t// console.log('Balance DAI: ' + ethers.utils.formatEther(balanceDAI));\n\n  // \t\treturn {\n  // \t\t\tsymbol: token.symbol.toUpperCase(),\n  // \t\t\tbalance: ethers.utils.formatEther(balance),\n  // \t\t\tlogoURI: token?.logoURI,\n  // \t\t};\n  // \t} catch (e) {}\n  // }\n  //======================{END: Get balances}===================================\n\n  //======================{START: Get Deposited balances}===================================\n\n  //======================{END: Get Deposited balances}===================================\n\n  async function getTokenBalances() {\n    setIsDepositedBalanceLoading(true);\n    let depositedTokenBalances = [];\n    // const usdc = await getTokenBalanceUSDC();\n    // const usdt = await getTokenBalanceUSDT();\n    // const tusd = await getTokenBalanceTUSD();\n    // const busd = await getTokenBalanceBUSD();\n    // const dai = await getTokenBalanceDAI();\n\n    // depositedTokenBalances.push(usdc);\n    // depositedTokenBalances.push(usdt);\n    // depositedTokenBalances.push(tusd);\n    // depositedTokenBalances.push(busd);\n    // depositedTokenBalances.push(dai);\n\n    //======================{START: Get Deposited balances}===================================\n    // ! Array.prototype.forEach() doesn't work, so\n    // * the good old for loop\n    for (let i = 0; i < activeChainTokens.length; i++) {\n      try {\n        let dexContract = new ethers.Contract(\n          dexContractAddress,\n          dexContractAbi,\n          signer.data // should be just \"signer\" if using windows.ethereum\n        );\n\n        // const dai_address = tokens.find(t => t.symbol.toLowerCase() === 'dai').testAddress;\n\n        const balance = await dexContract.getBalanceByClient(\n          //\"0x6b175474e89094c44da98b954eedeac495271d0f\", // main\n          // \"0x9744148D643E2CE62F452430593935Ec55002433\" // test\n          activeChainTokens[i].testAddress\n        );\n        // console.log('Balance DAI: ' + ethers.utils.formatEther(balanceDAI));\n        depositedTokenBalances.push({\n          symbol: activeChainTokens[i].symbol.toUpperCase(),\n          balance: ethers.utils.formatEther(balance),\n          logoURI: activeChainTokens[i]?.logoURI,\n        });\n      } catch (e) {}\n    }\n    //======================{END: Get Deposited balances}===================================\n    if (depositedTokenBalances.length > 0)\n      setDepositedBalances(depositedTokenBalances);\n    setIsDepositedBalanceLoading(false);\n\n    //=================== {START: Get Wallet Token balances}\n    setIsWalletBalanceLoading(true);\n    let walletTokenBalances = [];\n    for (let i = 0; i < activeChainTokens.length; i++) {\n      try {\n        const ERC20Contract = new ethers.Contract(\n          activeChainTokens[i].testAddress,\n          Erc20,\n          signer.data\n        );\n\n        const balance = await ERC20Contract.balanceOf(walletAddress);\n        walletTokenBalances.push({\n          symbol: activeChainTokens[i].symbol.toUpperCase(),\n          balance: ethers.utils.formatEther(balance),\n          logoURI: activeChainTokens[i]?.logoURI,\n        });\n      } catch (e) {}\n    }\n    if (walletTokenBalances.length > 0) setWalletBalances(walletTokenBalances);\n    setIsWalletBalanceLoading(false);\n    console.info('wallet balance', walletTokenBalances);\n  }\n\n  useEffect(() => {\n    chainId && contractSwitcher();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chainId]);\n\n  //======={Initial step}============================\n  useEffect(() => {\n    signer && getTokenBalances();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dexContractAddress, signer?.data?._address]); //* signer keeps changing but signer.data._address won't\n\n  //====={Update balances due to changes in new deposits}===========\n  useEffect(() => {\n    if (isConnected && isDeposited === true) {\n      setTimeout(() => {\n        getTokenBalances();\n        localStorage.setItem('isDeposited', JSON.stringify(false)); // New update\n      }, 1000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isDeposited]); //* signer keeps changing but signer.data._address won't\n\n  // ====={Update balances due to changes in wallet balances due to transfers received}===========\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (isConnected) {\n        getTokenBalances();\n      }\n    }, 30000); // updates every 30 sec\n    return () => {\n      clearInterval(intervalId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isConnected]);\n\n  \n  return (\n    <div className=\"relative w-[400px] h-[230px] flex flex-col bg-black border border-t-gray-300/10 border-l-gray-300/10 border-r-transparent border-b-transparent rounded-2xl bg-opacity-20 backdrop-filter backdrop-blur-md overflow-clip\">\n      <div className=\"absolute top-0 -left-20 w-full h-full skew-y-[45deg] bg-gradient-to-r from-white/10 to-transparent blur-lg z-0\" />\n      <div className=\"relative mt-2 ml-auto mr-8 flex flex-row gap-3 items-center text-gray-300 font-poppins text-2xl\">\n        <span\n          className=\"flex flex-row gap-3 justify-center text-xs\"\n          onChange={(e) => setSelectedTab(e.target.value)}\n        >\n          {tabs.map((tab) => (\n            <label key={tab} className=\"text-xs\">\n              <input\n                type=\"radio\"\n                id=\"tab\"\n                name=\"tab\"\n                value={tab}\n                className=\"peer sr-only\"\n              />\n              <span\n                className={`px-2 py-1 rounded-md cursor-pointer ${\n                  tab === selectedTab\n                    ? 'bg-black text-gray-200'\n                    : 'bg-black/50 text-gray-200/30'\n                } border border-transparent peer-hover:border-gray-200/30 peer-checked:bg-black peer-checked:hover:border-transparent peer-checked:text-gray-200`}\n              >\n                <span className=\"capitalize\">{tab}</span>\n              </span>\n            </label>\n          ))}\n        </span>\n        <span>Token balances</span>\n      </div>\n      <section className=\"relative mt-3 mb-6 px-6 h-fit w-full overflow-scroll scrollbar-hide\">\n        {/* selectedTab is 'Deposited' */}\n        {selectedTab === tabs[0] && (\n          <div className=\"flex flex-col gap-3 \">\n            {isDepositedBalanceLoading ? (\n              <div className=\"flex flex-row gap-3 items-center text-gray-300/50\">\n                <span>Loading...</span>\n                <span>\n                  <Spinner />\n                </span>\n              </div>\n            ) : depositedBalances[0]?.symbol !== undefined ? (\n              //filtering out zero balances\n              depositedBalances\n                .filter((currency) => currency.balance > 0)\n                .map((token) => (\n                  <TokenBalance key={token?.symbol} token={token} />\n                ))\n            ) : (\n              <span className=\"mx-auto text-gray-300/50\">\n                You don't seem to have any other tokens on this network\n              </span>\n            )}\n          </div>\n        )}\n        {selectedTab === tabs[1] && (\n          <div className=\"flex flex-col gap-3 \">\n            {isWalletBalanceLoading ? (\n              <div className=\"flex flex-row gap-3 items-center text-gray-300/50\">\n                <span>Loading...</span>\n                <span>\n                  <Spinner />\n                </span>\n              </div>\n            ) : walletBalances[0]?.symbol !== undefined ? (\n              //filtering out zero balances\n              walletBalances\n                .filter((currency) => currency.balance > 0)\n                .map((token) => (\n                  <TokenBalance key={token?.symbol} token={token} />\n                ))\n            ) : (\n              <span className=\"mx-auto text-gray-300/50\">\n                You don't seem to have any other tokens on this network\n              </span>\n            )}\n          </div>\n        )}\n      </section>\n    </div>\n  );\n};\n\nexport default MyTokenBalancesCard;\n"],"names":["_ref","token","_jsx","className","children","_jsxs","src","logoURI","alt","balance","symbol","tabs","_signer$data","_depositedBalances$","_walletBalances$","walletAddress","chainId","_useAccount","useAccount","isConnected","address","_useState","useState","_useState2","_slicedToArray","selectedTab","setSelectedTab","_useState3","_useState4","isDepositedBalanceLoading","setIsDepositedBalanceLoading","_useState5","_useState6","isWalletBalanceLoading","setIsWalletBalanceLoading","_useState7","_useState8","setDexAddress","_useState9","_useState10","dexContractAddress","setDexContractAddress","_useState11","_useState12","dexContractAbi","setDexContractAbi","_useState13","_useState14","setActiveChainDecimals","_useState15","_useState16","setActiveChainAddress","_useState17","_useState18","activeChainTokens","setActiveChainTokens","_useState19","_useState20","depositedBalances","setDepositedBalances","_useState21","_useState22","walletBalances","setWalletBalances","isDeposited","localStorage","getItem","JSON","parse","signer","useSigner","getTokenBalances","_getTokenBalances","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","depositedTokenBalances","i","_activeChainTokens$i","dexContract","walletTokenBalances","_i","_activeChainTokens$_i","ERC20Contract","_balance","wrap","_context","prev","next","length","ethers","data","getBalanceByClient","testAddress","sent","push","toUpperCase","t0","Erc20","balanceOf","t1","console","info","stop","useEffect","GoTransferGoerliETH","tokensGoerli","GoTransferMumbaiMATIC","tokensMumbai","GoTransferTBNB","GoTransferETH","GoTransferMATIC","GoTransferBSC","GoTransferOptimism","GoTransferArbitrum","warn","error","log","contractSwitcher","_address","setTimeout","setItem","stringify","intervalId","setInterval","clearInterval","onChange","e","target","value","map","tab","type","id","name","concat","Spinner","undefined","filter","currency","TokenBalance"],"sourceRoot":""}