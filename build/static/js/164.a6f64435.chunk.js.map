{"version":3,"file":"static/js/164.a6f64435.chunk.js","mappings":"qIAEMA,EAAO,CAAC,OAAQ,UA2HtB,UAzHmC,SAAHC,GACjBA,EAAdC,eAGM,IAFNC,EAAuBF,EAAvBE,wBACAC,EAAyBH,EAAzBG,0BA4FA,OACCC,EAAAA,EAAAA,KAAA,WAASC,UAAU,kCAAiCC,UACnDF,EAAAA,EAAAA,KAAA,OAAKC,UAAS,+CAAiDC,UAC9DC,EAAAA,EAAAA,MAAA,OAAKF,UAAS,iDAAmDC,SAAA,EAChEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,SACLP,EAAKS,KAAI,SAACC,GAAG,OACbL,EAAAA,EAAAA,KAAA,UAECM,KAAK,SACgBL,UAAS,2IAETM,QAAS,WACLF,IAAQV,EAAK,IAAMG,GAAwB,GAC3CO,IAAQV,EAAK,IAAMI,GAA0B,EACjD,EAAEG,SAEtBG,GATIA,EAUG,KAEVL,EAAAA,EAAAA,KAAA,QAAAE,SAAM,uBAKX,C","sources":["uiComponents/ClientExchangeTransactions.jsx"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\n\nconst tabs = [\"Cash\", \"Crypto\"];\n\nconst ClientExchangeTransactions = ({\n\tnewTransaction,\n\tsetIsCashTxModalVisible,\n\tsetIsCryptoTxModalVisible,\n}) => {\n\t// async function getClientsTransacts() {\n\t// \tlet dexContract = new ethers.Contract(\n\t// \t\tdexContractAddress,\n\t// \t\tdexContractAbi,\n\t// \t\tprovider // should be just \"signer\" if using windows.ethereum\n\t// \t);\n\n\t// \tlet transact;\n\t// \tswitch (selectedTab) {\n\t// \t\tcase \"active\":\n\t// \t\t\ttransact = await dexContract.getClientsHasNotReceivedCash();\n\t// \t\t\tbreak;\n\n\t// \t\tcase \"completed\":\n\t// \t\t\ttransact = await dexContract.getClientsCompletedTransacts();\n\t// \t\t\tbreak;\n\n\t// \t\tdefault:\n\t// \t\t\tconsole.warn(\"Please choose a transaction type!\");\n\t// \t}\n\n\t// \t// const transact = await dexContract.getExchangeVoucherForId(txId);\n\t// \t// const transact = await dexContract.getOneClientsCompletedTransact(txId);\n\t// \tconsole.log(\"MyTransactions--- transact\", transact);\n\n\t// \t//Fetch all the details of every NFT from the contract and display\n\t// \tconst items2 = await Promise.all(\n\t// \t\ttransact.map(async (i) => {\n\t// \t\t\tlet CryptoPrice = ethers.utils.formatUnits(\n\t// \t\t\t\ti.CryptoPrice.toString(),\n\t// \t\t\t\t\"ether\"\n\t// \t\t\t);\n\t// \t\t\tlet dexShare = ethers.utils.formatUnits(i.dexShare.toString(), \"ether\");\n\t// \t\t\tlet item2 =  {\n\t//                 txId: i.txId.toNumber(),\n\t//                 token: i.token,\n\t//                 client: i.client,\n\t//                 bank: i.bank,\n\t//                 CryptoPrice,\n\t//                 clientPaidCash: i.clientPaidCash,\n\t//                 bankReceivedCash: i.bankReceivedCash,\n\t//                 bankPaidCrypto: i.bankPaidCrypto,\n\t//                 completed: i.completed,\n\t//                 tokenDecimals: i.tokenDecimals,\n\t//                 clientReceivedCrypto: i.clientReceivedCrypto,\n\t//                 clientCreatedOrder: i.clientCreatedOrder,\n\t//                 dexShare,\n\n\t//             };\n\t// \t\t\t//sumCryptoPrice += Number(CryptoPrice);\n\t// \t\t\t// sumDexShare += Number(dexShare);\n\t// \t\t\treturn item2;\n\t// \t\t})\n\t// \t);\n\n\t// \tsetActiveTransactions(items2);\n\n\t// \t//Fetch all the details of every NFT from the contract and display\n\t// \tconst items3 = await Promise.all(\n\t// \t\ttransact.map(async (i) => {\n\t// \t\t\tlet CryptoPrice = ethers.utils.formatUnits(\n\t// \t\t\t\ti.CryptoPrice.toString(),\n\t// \t\t\t\t\"ether\"\n\t// \t\t\t);\n\t// \t\t\tlet dexShare = ethers.utils.formatUnits(i.dexShare.toString(), \"ether\");\n\t// \t\t\tlet item3 =  {\n\t//                 txId: i.txId.toNumber(),\n\t//                 token: i.token,\n\t//                 client: i.client,\n\t//                 bank: i.bank,\n\t//                 CryptoPrice,\n\t//                 clientPaidCash: i.clientPaidCash,\n\t//                 bankReceivedCash: i.bankReceivedCash,\n\t//                 bankPaidCrypto: i.bankPaidCrypto,\n\t//                 completed: i.completed,\n\t//                 tokenDecimals: i.tokenDecimals,\n\t//                 clientReceivedCrypto: i.clientReceivedCrypto,\n\t//                 clientCreatedOrder: i.clientCreatedOrder,\n\t//                 dexShare,\n\n\t//             };\n\t// \t\t\t//sumCryptoPrice += Number(CryptoPrice);\n\t// \t\t\t// sumDexShare += Number(dexShare);\n\t// \t\t\treturn item3;\n\t// \t\t})\n\t// \t);\n\n\t// \tsetCompletedTransactions(items3);\n\t// }\n\n\treturn (\n\t\t<section className=\"mt-4 flex flex-col items-center\">\n\t\t\t<div className={`px-4 py-3 w-[400px] rounded-lg parentBgColor`}>\n\t\t\t\t<div className={`flex flex-row gap-4 items-center text-gray-400`}>\n\t\t\t\t\t<span>View</span>\n\t\t\t\t\t{tabs.map((tab) => (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tkey={tab}\n\t\t\t\t\t\t\ttype=\"button\"\n                            className={`px-2 py-1 rounded-md cursor-pointer border-none\n                            text-gray-600 font-bold hover:underline hover:text-gray-200`}\n                            onClick={() => {\n                                tab === tabs[0] && setIsCashTxModalVisible(true);\n                                tab === tabs[1] && setIsCryptoTxModalVisible(true);\n                            }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{tab}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t))}\n\t\t\t\t\t<span>Transactions</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</section>\n\t);\n};\n\nexport default ClientExchangeTransactions;\n"],"names":["tabs","_ref","newTransaction","setIsCashTxModalVisible","setIsCryptoTxModalVisible","_jsx","className","children","_jsxs","map","tab","type","onClick"],"sourceRoot":""}